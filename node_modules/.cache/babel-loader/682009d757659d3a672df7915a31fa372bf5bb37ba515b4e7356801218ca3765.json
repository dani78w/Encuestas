{"ast":null,"code":"import { useCollator as $325a3faab7a68acd$export$a16aca283550c30d } from \"./useCollator.mjs\";\nimport { useCallback as $21ck9$useCallback, useMemo as $21ck9$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({\n    usage: \"search\",\n    ...options\n  });\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n  let startsWith = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    // Normalize both strings so we can slice safely\n    // TODO: take into account the ignorePunctuation option as well...\n    string = string.normalize(\"NFC\");\n    substring = substring.normalize(\"NFC\");\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n  let endsWith = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize(\"NFC\");\n    substring = substring.normalize(\"NFC\");\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n  let contains = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize(\"NFC\");\n    substring = substring.normalize(\"NFC\");\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) return true;\n    }\n    return false;\n  }, [collator]);\n  return (0, $21ck9$useMemo)(() => ({\n    startsWith: startsWith,\n    endsWith: endsWith,\n    contains: contains\n  }), [startsWith, endsWith, contains]);\n}\nexport { $bb77f239b46e8c72$export$3274cf84b703fff as useFilter };","map":{"version":3,"names":["useCollator","$325a3faab7a68acd$export$a16aca283550c30d","useCallback","$21ck9$useCallback","useMemo","$21ck9$useMemo","$bb77f239b46e8c72$export$3274cf84b703fff","options","collator","usage","startsWith","string","substring","length","normalize","compare","slice","endsWith","contains","scan","sliceLen","useFilter"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-aria/i18n/dist/useFilter.mjs"],"sourcesContent":["import {useCollator as $325a3faab7a68acd$export$a16aca283550c30d} from \"./useCollator.mjs\";\nimport {useCallback as $21ck9$useCallback, useMemo as $21ck9$useMemo} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n    let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({\n        usage: \"search\",\n        ...options\n    });\n    // TODO(later): these methods don't currently support the ignorePunctuation option.\n    let startsWith = (0, $21ck9$useCallback)((string, substring)=>{\n        if (substring.length === 0) return true;\n        // Normalize both strings so we can slice safely\n        // TODO: take into account the ignorePunctuation option as well...\n        string = string.normalize(\"NFC\");\n        substring = substring.normalize(\"NFC\");\n        return collator.compare(string.slice(0, substring.length), substring) === 0;\n    }, [\n        collator\n    ]);\n    let endsWith = (0, $21ck9$useCallback)((string, substring)=>{\n        if (substring.length === 0) return true;\n        string = string.normalize(\"NFC\");\n        substring = substring.normalize(\"NFC\");\n        return collator.compare(string.slice(-substring.length), substring) === 0;\n    }, [\n        collator\n    ]);\n    let contains = (0, $21ck9$useCallback)((string, substring)=>{\n        if (substring.length === 0) return true;\n        string = string.normalize(\"NFC\");\n        substring = substring.normalize(\"NFC\");\n        let scan = 0;\n        let sliceLen = substring.length;\n        for(; scan + sliceLen <= string.length; scan++){\n            let slice = string.slice(scan, scan + sliceLen);\n            if (collator.compare(substring, slice) === 0) return true;\n        }\n        return false;\n    }, [\n        collator\n    ]);\n    return (0, $21ck9$useMemo)(()=>({\n            startsWith: startsWith,\n            endsWith: endsWith,\n            contains: contains\n        }), [\n        startsWith,\n        endsWith,\n        contains\n    ]);\n}\n\n\nexport {$bb77f239b46e8c72$export$3274cf84b703fff as useFilter};\n//# sourceMappingURL=useFilter.mjs.map\n"],"mappings":"AAAA,SAAQA,WAAW,IAAIC,yCAAyC,QAAO,mBAAmB;AAC1F,SAAQC,WAAW,IAAIC,kBAAkB,EAAEC,OAAO,IAAIC,cAAc,QAAO,OAAO;;AAElF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,wCAAwCA,CAACC,OAAO,EAAE;EACvD,IAAIC,QAAQ,GAAG,CAAC,CAAC,EAAEP,yCAAyC,EAAE;IAC1DQ,KAAK,EAAE,QAAQ;IACf,GAAGF;EACP,CAAC,CAAC;EACF;EACA,IAAIG,UAAU,GAAG,CAAC,CAAC,EAAEP,kBAAkB,EAAE,CAACQ,MAAM,EAAEC,SAAS,KAAG;IAC1D,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IACvC;IACA;IACAF,MAAM,GAAGA,MAAM,CAACG,SAAS,CAAC,KAAK,CAAC;IAChCF,SAAS,GAAGA,SAAS,CAACE,SAAS,CAAC,KAAK,CAAC;IACtC,OAAON,QAAQ,CAACO,OAAO,CAACJ,MAAM,CAACK,KAAK,CAAC,CAAC,EAAEJ,SAAS,CAACC,MAAM,CAAC,EAAED,SAAS,CAAC,KAAK,CAAC;EAC/E,CAAC,EAAE,CACCJ,QAAQ,CACX,CAAC;EACF,IAAIS,QAAQ,GAAG,CAAC,CAAC,EAAEd,kBAAkB,EAAE,CAACQ,MAAM,EAAEC,SAAS,KAAG;IACxD,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IACvCF,MAAM,GAAGA,MAAM,CAACG,SAAS,CAAC,KAAK,CAAC;IAChCF,SAAS,GAAGA,SAAS,CAACE,SAAS,CAAC,KAAK,CAAC;IACtC,OAAON,QAAQ,CAACO,OAAO,CAACJ,MAAM,CAACK,KAAK,CAAC,CAACJ,SAAS,CAACC,MAAM,CAAC,EAAED,SAAS,CAAC,KAAK,CAAC;EAC7E,CAAC,EAAE,CACCJ,QAAQ,CACX,CAAC;EACF,IAAIU,QAAQ,GAAG,CAAC,CAAC,EAAEf,kBAAkB,EAAE,CAACQ,MAAM,EAAEC,SAAS,KAAG;IACxD,IAAIA,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IACvCF,MAAM,GAAGA,MAAM,CAACG,SAAS,CAAC,KAAK,CAAC;IAChCF,SAAS,GAAGA,SAAS,CAACE,SAAS,CAAC,KAAK,CAAC;IACtC,IAAIK,IAAI,GAAG,CAAC;IACZ,IAAIC,QAAQ,GAAGR,SAAS,CAACC,MAAM;IAC/B,OAAMM,IAAI,GAAGC,QAAQ,IAAIT,MAAM,CAACE,MAAM,EAAEM,IAAI,EAAE,EAAC;MAC3C,IAAIH,KAAK,GAAGL,MAAM,CAACK,KAAK,CAACG,IAAI,EAAEA,IAAI,GAAGC,QAAQ,CAAC;MAC/C,IAAIZ,QAAQ,CAACO,OAAO,CAACH,SAAS,EAAEI,KAAK,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI;IAC7D;IACA,OAAO,KAAK;EAChB,CAAC,EAAE,CACCR,QAAQ,CACX,CAAC;EACF,OAAO,CAAC,CAAC,EAAEH,cAAc,EAAE,OAAK;IACxBK,UAAU,EAAEA,UAAU;IACtBO,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA;EACd,CAAC,CAAC,EAAE,CACJR,UAAU,EACVO,QAAQ,EACRC,QAAQ,CACX,CAAC;AACN;AAGA,SAAQZ,wCAAwC,IAAIe,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}