{"ast":null,"code":"import { convertValue as $35a22f14a1f04b11$export$61a490a80c552550, createPlaceholderDate as $35a22f14a1f04b11$export$66aa2b09de4b1ea5, getFormatOptions as $35a22f14a1f04b11$export$7e319ea407e63bc0, getValidationResult as $35a22f14a1f04b11$export$f18627323ab57ac0, useDefaultProps as $35a22f14a1f04b11$export$2440da353cedad43 } from \"./utils.mjs\";\nimport { getPlaceholder as $3e3ed55ab2966714$export$d3f5c5e0a5023fa0 } from \"./placeholders.mjs\";\nimport { DateFormatter as $g03ag$DateFormatter, toCalendar as $g03ag$toCalendar, GregorianCalendar as $g03ag$GregorianCalendar, getMinimumMonthInYear as $g03ag$getMinimumMonthInYear, getMinimumDayInMonth as $g03ag$getMinimumDayInMonth } from \"@internationalized/date\";\nimport { useFormValidationState as $g03ag$useFormValidationState } from \"@react-stately/form\";\nimport { useControlledState as $g03ag$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $g03ag$useMemo, useState as $g03ag$useState, useRef as $g03ag$useRef, useEffect as $g03ag$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n// Node seems to convert everything to lowercase...\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n  dayperiod: \"dayPeriod\"\n};\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n  let {\n    locale: locale,\n    createCalendar: createCalendar,\n    hideTimeZone: hideTimeZone,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let v = props.value || props.defaultValue || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let timeZone = defaultTimeZone || \"UTC\";\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n  let defaultFormatter = (0, $g03ag$useMemo)(() => new (0, $g03ag$DateFormatter)(locale), [locale]);\n  let calendar = (0, $g03ag$useMemo)(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n  let [value, setDate] = (0, $g03ag$useControlledState)(props.value, props.defaultValue, props.onChange);\n  let calendarValue = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [value, calendar]);\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = (0, $g03ag$useState)(() => (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === \"gregory\" && val.era === \"BC\";\n  let formatOpts = (0, $g03ag$useMemo)(() => {\n    var _props_maxGranularity;\n    return {\n      granularity: granularity,\n      maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n      timeZone: defaultTimeZone,\n      hideTimeZone: hideTimeZone,\n      hourCycle: props.hourCycle,\n      showEra: showEra,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros\n    };\n  }, [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [formatOpts]);\n  let dateFormatter = (0, $g03ag$useMemo)(() => new (0, $g03ag$DateFormatter)(locale, opts), [locale, opts]);\n  let resolvedOptions = (0, $g03ag$useMemo)(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments = (0, $g03ag$useMemo)(() => dateFormatter.formatToParts(new Date()).filter(seg => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [dateFormatter]);\n  let [validSegments, setValidSegments] = (0, $g03ag$useState)(() => props.value || props.defaultValue ? {\n    ...allSegments\n  } : {});\n  let clearedSegment = (0, $g03ag$useRef)();\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = (0, $g03ag$useRef)(calendar.identifier);\n  (0, $g03ag$useEffect)(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder => Object.keys(validSegments).length > 0 ? (0, $g03ag$toCalendar)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {\n      ...allSegments\n    };\n    setValidSegments(validSegments);\n  }\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = newValue => {\n    if (props.isDisabled || props.isReadOnly) return;\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== \"dayPeriod\") {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = (0, $g03ag$toCalendar)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $g03ag$GregorianCalendar)());\n      setDate(newValue);\n    } else setPlaceholderDate(newValue);\n    clearedSegment.current = null;\n  };\n  let dateValue = (0, $g03ag$useMemo)(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = (0, $g03ag$useMemo)(() => dateFormatter.formatToParts(dateValue).map(segment => {\n    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n    if (segment.type === \"era\" && calendar.getEras().length === 1) isEditable = false;\n    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;\n    return {\n      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n      text: isPlaceholder ? placeholder : segment.value,\n      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n      isPlaceholder: isPlaceholder,\n      placeholder: placeholder,\n      isEditable: isEditable\n    };\n  }), [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({\n      ...validSegments\n    });\n  }\n  let markValid = part => {\n    validSegments[part] = true;\n    if (part === \"year\" && allSegments.era) validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  };\n  let adjustSegment = (type, amount) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);\n    } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n  };\n  let builtinValidation = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $g03ag$useFormValidationState)({\n    ...props,\n    value: value,\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n  var _props_maxGranularity;\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue: dateValue,\n    calendar: calendar,\n    setValue: setValue,\n    segments: segments,\n    dateFormatter: dateFormatter,\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    granularity: granularity,\n    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) return;\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {\n          ...allSegments\n        };\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({\n        ...validSegments\n      });\n      let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n      // Reset day period to default without changing the hour.\n      if (part === \"dayPeriod\" && \"hour\" in displayValue && \"hour\" in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) value = displayValue.set({\n          hour: displayValue.hour - 12\n        });else if (!isPM && shouldBePM) value = displayValue.set({\n          hour: displayValue.hour + 12\n        });\n      } else if (part in displayValue) value = displayValue.set({\n        [part]: placeholder[part]\n      });\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions) {\n      if (!calendarValue) return \"\";\n      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n      let formatter = new (0, $g03ag$DateFormatter)(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n  switch (type) {\n    case \"era\":\n      {\n        let eras = date.calendar.getEras();\n        return {\n          value: eras.indexOf(date.era),\n          minValue: 0,\n          maxValue: eras.length - 1\n        };\n      }\n    case \"year\":\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case \"month\":\n      return {\n        value: date.month,\n        minValue: (0, $g03ag$getMinimumMonthInYear)(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case \"day\":\n      return {\n        value: date.day,\n        minValue: (0, $g03ag$getMinimumDayInMonth)(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n  if (\"hour\" in date) switch (type) {\n    case \"dayPeriod\":\n      return {\n        value: date.hour >= 12 ? 12 : 0,\n        minValue: 0,\n        maxValue: 12\n      };\n    case \"hour\":\n      if (options.hour12) {\n        let isPM = date.hour >= 12;\n        return {\n          value: date.hour,\n          minValue: isPM ? 12 : 0,\n          maxValue: isPM ? 23 : 11\n        };\n      }\n      return {\n        value: date.hour,\n        minValue: 0,\n        maxValue: 23\n      };\n    case \"minute\":\n      return {\n        value: date.minute,\n        minValue: 0,\n        maxValue: 59\n      };\n    case \"second\":\n      return {\n        value: date.second,\n        minValue: 0,\n        maxValue: 59\n      };\n  }\n  return {};\n}\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n  switch (part) {\n    case \"era\":\n    case \"year\":\n    case \"month\":\n    case \"day\":\n      return value.cycle(part, amount, {\n        round: part === \"year\"\n      });\n  }\n  if (\"hour\" in value) switch (part) {\n    case \"dayPeriod\":\n      {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({\n          hour: isPM ? hours - 12 : hours + 12\n        });\n      }\n    case \"hour\":\n    case \"minute\":\n    case \"second\":\n      return value.cycle(part, amount, {\n        round: part !== \"hour\",\n        hourCycle: options.hour12 ? 12 : 24\n      });\n  }\n}\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n  switch (part) {\n    case \"day\":\n    case \"month\":\n    case \"year\":\n    case \"era\":\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n  if (\"hour\" in value) switch (part) {\n    case \"dayPeriod\":\n      {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) return value;\n        return value.set({\n          hour: wasPM ? hours - 12 : hours + 12\n        });\n      }\n    case \"hour\":\n      // In 12 hour time, ensure that AM/PM does not change\n      if (options.hour12) {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        if (!wasPM && segmentValue === 12) segmentValue = 0;\n        if (wasPM && segmentValue < 12) segmentValue += 12;\n      }\n    // fallthrough\n    case \"minute\":\n    case \"second\":\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n}\nexport { $3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState };","map":{"version":3,"names":["convertValue","$35a22f14a1f04b11$export$61a490a80c552550","createPlaceholderDate","$35a22f14a1f04b11$export$66aa2b09de4b1ea5","getFormatOptions","$35a22f14a1f04b11$export$7e319ea407e63bc0","getValidationResult","$35a22f14a1f04b11$export$f18627323ab57ac0","useDefaultProps","$35a22f14a1f04b11$export$2440da353cedad43","getPlaceholder","$3e3ed55ab2966714$export$d3f5c5e0a5023fa0","DateFormatter","$g03ag$DateFormatter","toCalendar","$g03ag$toCalendar","GregorianCalendar","$g03ag$GregorianCalendar","getMinimumMonthInYear","$g03ag$getMinimumMonthInYear","getMinimumDayInMonth","$g03ag$getMinimumDayInMonth","useFormValidationState","$g03ag$useFormValidationState","useControlledState","$g03ag$useControlledState","useMemo","$g03ag$useMemo","useState","$g03ag$useState","useRef","$g03ag$useRef","useEffect","$g03ag$useEffect","$3c0fc76039f1c516$var$EDITABLE_SEGMENTS","year","month","day","hour","minute","second","dayPeriod","era","$3c0fc76039f1c516$var$PAGE_STEP","$3c0fc76039f1c516$var$TYPE_MAPPING","dayperiod","$3c0fc76039f1c516$export$60e84778edff6d26","props","locale","createCalendar","hideTimeZone","isDisabled","isReadOnly","isRequired","minValue","maxValue","isDateUnavailable","v","value","defaultValue","placeholderValue","granularity","defaultTimeZone","timeZone","Error","toString","defaultFormatter","calendar","resolvedOptions","setDate","onChange","calendarValue","placeholderDate","setPlaceholderDate","val","showEra","identifier","formatOpts","_props_maxGranularity","maxGranularity","hourCycle","shouldForceLeadingZeros","opts","dateFormatter","allSegments","formatToParts","Date","filter","seg","type","reduce","p","validSegments","setValidSegments","clearedSegment","lastCalendarIdentifier","current","placeholder","Object","keys","length","displayValue","setValue","newValue","validKeys","allKeys","dateValue","toDate","segments","map","segment","isEditable","getEras","isPlaceholder","text","$3c0fc76039f1c516$var$getSegmentLimits","markValid","part","adjustSegment","amount","$3c0fc76039f1c516$var$addSegment","builtinValidation","validation","isValueInvalid","displayValidation","isInvalid","validationState","increment","decrement","incrementPage","decrementPage","setSegment","$3c0fc76039f1c516$var$setSegment","confirmPlaceholder","copy","clearSegment","isPM","shouldBePM","set","formatValue","fieldOptions","formatOptions","formatter","format","date","options","eras","indexOf","getYearsInEra","getMonthsInYear","getDaysInMonth","hour12","cycle","round","hours","segmentValue","wasPM","useDateFieldState"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-stately/datepicker/dist/useDateFieldState.mjs"],"sourcesContent":["import {convertValue as $35a22f14a1f04b11$export$61a490a80c552550, createPlaceholderDate as $35a22f14a1f04b11$export$66aa2b09de4b1ea5, getFormatOptions as $35a22f14a1f04b11$export$7e319ea407e63bc0, getValidationResult as $35a22f14a1f04b11$export$f18627323ab57ac0, useDefaultProps as $35a22f14a1f04b11$export$2440da353cedad43} from \"./utils.mjs\";\nimport {getPlaceholder as $3e3ed55ab2966714$export$d3f5c5e0a5023fa0} from \"./placeholders.mjs\";\nimport {DateFormatter as $g03ag$DateFormatter, toCalendar as $g03ag$toCalendar, GregorianCalendar as $g03ag$GregorianCalendar, getMinimumMonthInYear as $g03ag$getMinimumMonthInYear, getMinimumDayInMonth as $g03ag$getMinimumDayInMonth} from \"@internationalized/date\";\nimport {useFormValidationState as $g03ag$useFormValidationState} from \"@react-stately/form\";\nimport {useControlledState as $g03ag$useControlledState} from \"@react-stately/utils\";\nimport {useMemo as $g03ag$useMemo, useState as $g03ag$useState, useRef as $g03ag$useRef, useEffect as $g03ag$useEffect} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n    year: true,\n    month: true,\n    day: true,\n    hour: true,\n    minute: true,\n    second: true,\n    dayPeriod: true,\n    era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n    year: 5,\n    month: 2,\n    day: 7,\n    hour: 2,\n    minute: 15,\n    second: 15\n};\n// Node seems to convert everything to lowercase...\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n    dayperiod: \"dayPeriod\"\n};\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n    let { locale: locale, createCalendar: createCalendar, hideTimeZone: hideTimeZone, isDisabled: isDisabled, isReadOnly: isReadOnly, isRequired: isRequired, minValue: minValue, maxValue: maxValue, isDateUnavailable: isDateUnavailable } = props;\n    let v = props.value || props.defaultValue || props.placeholderValue;\n    let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n    let timeZone = defaultTimeZone || \"UTC\";\n    // props.granularity must actually exist in the value if one is provided.\n    if (v && !(granularity in v)) throw new Error(\"Invalid granularity \" + granularity + \" for value \" + v.toString());\n    let defaultFormatter = (0, $g03ag$useMemo)(()=>new (0, $g03ag$DateFormatter)(locale), [\n        locale\n    ]);\n    let calendar = (0, $g03ag$useMemo)(()=>createCalendar(defaultFormatter.resolvedOptions().calendar), [\n        createCalendar,\n        defaultFormatter\n    ]);\n    let [value, setDate] = (0, $g03ag$useControlledState)(props.value, props.defaultValue, props.onChange);\n    let calendarValue = (0, $g03ag$useMemo)(()=>(0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [\n        value,\n        calendar\n    ]);\n    // We keep track of the placeholder date separately in state so that onChange is not called\n    // until all segments are set. If the value === null (not undefined), then assume the component\n    // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n    // change from uncontrolled to controlled and emit a warning.\n    let [placeholderDate, setPlaceholderDate] = (0, $g03ag$useState)(()=>(0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    let val = calendarValue || placeholderDate;\n    let showEra = calendar.identifier === \"gregory\" && val.era === \"BC\";\n    let formatOpts = (0, $g03ag$useMemo)(()=>{\n        var _props_maxGranularity;\n        return {\n            granularity: granularity,\n            maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n            timeZone: defaultTimeZone,\n            hideTimeZone: hideTimeZone,\n            hourCycle: props.hourCycle,\n            showEra: showEra,\n            shouldForceLeadingZeros: props.shouldForceLeadingZeros\n        };\n    }, [\n        props.maxGranularity,\n        granularity,\n        props.hourCycle,\n        props.shouldForceLeadingZeros,\n        defaultTimeZone,\n        hideTimeZone,\n        showEra\n    ]);\n    let opts = (0, $g03ag$useMemo)(()=>(0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [\n        formatOpts\n    ]);\n    let dateFormatter = (0, $g03ag$useMemo)(()=>new (0, $g03ag$DateFormatter)(locale, opts), [\n        locale,\n        opts\n    ]);\n    let resolvedOptions = (0, $g03ag$useMemo)(()=>dateFormatter.resolvedOptions(), [\n        dateFormatter\n    ]);\n    // Determine how many editable segments there are for validation purposes.\n    // The result is cached for performance.\n    let allSegments = (0, $g03ag$useMemo)(()=>dateFormatter.formatToParts(new Date()).filter((seg)=>$3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg)=>(p[seg.type] = true, p), {}), [\n        dateFormatter\n    ]);\n    let [validSegments, setValidSegments] = (0, $g03ag$useState)(()=>props.value || props.defaultValue ? {\n            ...allSegments\n        } : {});\n    let clearedSegment = (0, $g03ag$useRef)();\n    // Reset placeholder when calendar changes\n    let lastCalendarIdentifier = (0, $g03ag$useRef)(calendar.identifier);\n    (0, $g03ag$useEffect)(()=>{\n        if (calendar.identifier !== lastCalendarIdentifier.current) {\n            lastCalendarIdentifier.current = calendar.identifier;\n            setPlaceholderDate((placeholder)=>Object.keys(validSegments).length > 0 ? (0, $g03ag$toCalendar)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n        }\n    }, [\n        calendar,\n        granularity,\n        validSegments,\n        defaultTimeZone,\n        props.placeholderValue\n    ]);\n    // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n    if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n        validSegments = {\n            ...allSegments\n        };\n        setValidSegments(validSegments);\n    }\n    // If the value is set to null and all segments are valid, reset the placeholder.\n    if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n        validSegments = {};\n        setValidSegments(validSegments);\n        setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n    // If all segments are valid, use the date from state, otherwise use the placeholder date.\n    let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n    let setValue = (newValue)=>{\n        if (props.isDisabled || props.isReadOnly) return;\n        let validKeys = Object.keys(validSegments);\n        let allKeys = Object.keys(allSegments);\n        // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n        if (newValue == null) {\n            setDate(null);\n            setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n            setValidSegments({});\n        } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== \"dayPeriod\") {\n            // The display calendar should not have any effect on the emitted value.\n            // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n            newValue = (0, $g03ag$toCalendar)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $g03ag$GregorianCalendar)());\n            setDate(newValue);\n        } else setPlaceholderDate(newValue);\n        clearedSegment.current = null;\n    };\n    let dateValue = (0, $g03ag$useMemo)(()=>displayValue.toDate(timeZone), [\n        displayValue,\n        timeZone\n    ]);\n    let segments = (0, $g03ag$useMemo)(()=>dateFormatter.formatToParts(dateValue).map((segment)=>{\n            let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n            if (segment.type === \"era\" && calendar.getEras().length === 1) isEditable = false;\n            let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n            let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;\n            return {\n                type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n                text: isPlaceholder ? placeholder : segment.value,\n                ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n                isPlaceholder: isPlaceholder,\n                placeholder: placeholder,\n                isEditable: isEditable\n            };\n        }), [\n        dateValue,\n        validSegments,\n        dateFormatter,\n        resolvedOptions,\n        displayValue,\n        calendar,\n        locale\n    ]);\n    // When the era field appears, mark it valid if the year field is already valid.\n    // If the era field disappears, remove it from the valid segments.\n    if (allSegments.era && validSegments.year && !validSegments.era) {\n        validSegments.era = true;\n        setValidSegments({\n            ...validSegments\n        });\n    } else if (!allSegments.era && validSegments.era) {\n        delete validSegments.era;\n        setValidSegments({\n            ...validSegments\n        });\n    }\n    let markValid = (part)=>{\n        validSegments[part] = true;\n        if (part === \"year\" && allSegments.era) validSegments.era = true;\n        setValidSegments({\n            ...validSegments\n        });\n    };\n    let adjustSegment = (type, amount)=>{\n        if (!validSegments[type]) {\n            markValid(type);\n            let validKeys = Object.keys(validSegments);\n            let allKeys = Object.keys(allSegments);\n            if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);\n        } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n    };\n    let builtinValidation = (0, $g03ag$useMemo)(()=>(0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [\n        value,\n        minValue,\n        maxValue,\n        isDateUnavailable,\n        formatOpts\n    ]);\n    let validation = (0, $g03ag$useFormValidationState)({\n        ...props,\n        value: value,\n        builtinValidation: builtinValidation\n    });\n    let isValueInvalid = validation.displayValidation.isInvalid;\n    let validationState = props.validationState || (isValueInvalid ? \"invalid\" : null);\n    var _props_maxGranularity;\n    return {\n        ...validation,\n        value: calendarValue,\n        dateValue: dateValue,\n        calendar: calendar,\n        setValue: setValue,\n        segments: segments,\n        dateFormatter: dateFormatter,\n        validationState: validationState,\n        isInvalid: isValueInvalid,\n        granularity: granularity,\n        maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : \"year\",\n        isDisabled: isDisabled,\n        isReadOnly: isReadOnly,\n        isRequired: isRequired,\n        increment (part) {\n            adjustSegment(part, 1);\n        },\n        decrement (part) {\n            adjustSegment(part, -1);\n        },\n        incrementPage (part) {\n            adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n        },\n        decrementPage (part) {\n            adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n        },\n        setSegment (part, v) {\n            markValid(part);\n            setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n        },\n        confirmPlaceholder () {\n            if (props.isDisabled || props.isReadOnly) return;\n            // Confirm the placeholder if only the day period is not filled in.\n            let validKeys = Object.keys(validSegments);\n            let allKeys = Object.keys(allSegments);\n            if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n                validSegments = {\n                    ...allSegments\n                };\n                setValidSegments(validSegments);\n                setValue(displayValue.copy());\n            }\n        },\n        clearSegment (part) {\n            delete validSegments[part];\n            clearedSegment.current = part;\n            setValidSegments({\n                ...validSegments\n            });\n            let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);\n            let value = displayValue;\n            // Reset day period to default without changing the hour.\n            if (part === \"dayPeriod\" && \"hour\" in displayValue && \"hour\" in placeholder) {\n                let isPM = displayValue.hour >= 12;\n                let shouldBePM = placeholder.hour >= 12;\n                if (isPM && !shouldBePM) value = displayValue.set({\n                    hour: displayValue.hour - 12\n                });\n                else if (!isPM && shouldBePM) value = displayValue.set({\n                    hour: displayValue.hour + 12\n                });\n            } else if (part in displayValue) value = displayValue.set({\n                [part]: placeholder[part]\n            });\n            setDate(null);\n            setValue(value);\n        },\n        formatValue (fieldOptions) {\n            if (!calendarValue) return \"\";\n            let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n            let formatter = new (0, $g03ag$DateFormatter)(locale, formatOptions);\n            return formatter.format(dateValue);\n        }\n    };\n}\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n    switch(type){\n        case \"era\":\n            {\n                let eras = date.calendar.getEras();\n                return {\n                    value: eras.indexOf(date.era),\n                    minValue: 0,\n                    maxValue: eras.length - 1\n                };\n            }\n        case \"year\":\n            return {\n                value: date.year,\n                minValue: 1,\n                maxValue: date.calendar.getYearsInEra(date)\n            };\n        case \"month\":\n            return {\n                value: date.month,\n                minValue: (0, $g03ag$getMinimumMonthInYear)(date),\n                maxValue: date.calendar.getMonthsInYear(date)\n            };\n        case \"day\":\n            return {\n                value: date.day,\n                minValue: (0, $g03ag$getMinimumDayInMonth)(date),\n                maxValue: date.calendar.getDaysInMonth(date)\n            };\n    }\n    if (\"hour\" in date) switch(type){\n        case \"dayPeriod\":\n            return {\n                value: date.hour >= 12 ? 12 : 0,\n                minValue: 0,\n                maxValue: 12\n            };\n        case \"hour\":\n            if (options.hour12) {\n                let isPM = date.hour >= 12;\n                return {\n                    value: date.hour,\n                    minValue: isPM ? 12 : 0,\n                    maxValue: isPM ? 23 : 11\n                };\n            }\n            return {\n                value: date.hour,\n                minValue: 0,\n                maxValue: 23\n            };\n        case \"minute\":\n            return {\n                value: date.minute,\n                minValue: 0,\n                maxValue: 59\n            };\n        case \"second\":\n            return {\n                value: date.second,\n                minValue: 0,\n                maxValue: 59\n            };\n    }\n    return {};\n}\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n    switch(part){\n        case \"era\":\n        case \"year\":\n        case \"month\":\n        case \"day\":\n            return value.cycle(part, amount, {\n                round: part === \"year\"\n            });\n    }\n    if (\"hour\" in value) switch(part){\n        case \"dayPeriod\":\n            {\n                let hours = value.hour;\n                let isPM = hours >= 12;\n                return value.set({\n                    hour: isPM ? hours - 12 : hours + 12\n                });\n            }\n        case \"hour\":\n        case \"minute\":\n        case \"second\":\n            return value.cycle(part, amount, {\n                round: part !== \"hour\",\n                hourCycle: options.hour12 ? 12 : 24\n            });\n    }\n}\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n    switch(part){\n        case \"day\":\n        case \"month\":\n        case \"year\":\n        case \"era\":\n            return value.set({\n                [part]: segmentValue\n            });\n    }\n    if (\"hour\" in value) switch(part){\n        case \"dayPeriod\":\n            {\n                let hours = value.hour;\n                let wasPM = hours >= 12;\n                let isPM = segmentValue >= 12;\n                if (isPM === wasPM) return value;\n                return value.set({\n                    hour: wasPM ? hours - 12 : hours + 12\n                });\n            }\n        case \"hour\":\n            // In 12 hour time, ensure that AM/PM does not change\n            if (options.hour12) {\n                let hours = value.hour;\n                let wasPM = hours >= 12;\n                if (!wasPM && segmentValue === 12) segmentValue = 0;\n                if (wasPM && segmentValue < 12) segmentValue += 12;\n            }\n        // fallthrough\n        case \"minute\":\n        case \"second\":\n            return value.set({\n                [part]: segmentValue\n            });\n    }\n}\n\n\nexport {$3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState};\n//# sourceMappingURL=useDateFieldState.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}