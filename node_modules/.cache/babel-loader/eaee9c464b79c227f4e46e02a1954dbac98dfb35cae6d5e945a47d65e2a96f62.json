{"ast":null,"code":"import $dShfP$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { announce as $dShfP$announce } from \"@react-aria/live-announcer\";\nimport { ariaHideOutside as $dShfP$ariaHideOutside } from \"@react-aria/overlays\";\nimport { listData as $dShfP$listData, getItemId as $dShfP$getItemId } from \"@react-aria/listbox\";\nimport { useRouter as $dShfP$useRouter, chain as $dShfP$chain, useLabels as $dShfP$useLabels, isAppleDevice as $dShfP$isAppleDevice, mergeProps as $dShfP$mergeProps } from \"@react-aria/utils\";\nimport { useMemo as $dShfP$useMemo, useRef as $dShfP$useRef, useEffect as $dShfP$useEffect } from \"react\";\nimport { getChildNodes as $dShfP$getChildNodes, getItemCount as $dShfP$getItemCount } from \"@react-stately/collections\";\nimport { ListKeyboardDelegate as $dShfP$ListKeyboardDelegate, useSelectableCollection as $dShfP$useSelectableCollection } from \"@react-aria/selection\";\nimport { privateValidationStateProp as $dShfP$privateValidationStateProp } from \"@react-stately/form\";\nimport { useLocalizedStringFormatter as $dShfP$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useMenuTrigger as $dShfP$useMenuTrigger } from \"@react-aria/menu\";\nimport { useTextField as $dShfP$useTextField } from \"@react-aria/textfield\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c350ade66beef0af$export$8c18d1b4f7232bbf(props, state) {\n  let {\n    buttonRef: buttonRef,\n    popoverRef: popoverRef,\n    inputRef: inputRef,\n    listBoxRef: listBoxRef,\n    keyboardDelegate: keyboardDelegate,\n    shouldFocusWrap:\n    // completionMode = 'suggest',\n    shouldFocusWrap,\n    isReadOnly: isReadOnly,\n    isDisabled: isDisabled\n  } = props;\n  let stringFormatter = (0, $dShfP$useLocalizedStringFormatter)((0, $parcel$interopDefault($dShfP$intlStringsmodulejs)), \"@react-aria/combobox\");\n  let {\n    menuTriggerProps: menuTriggerProps,\n    menuProps: menuProps\n  } = (0, $dShfP$useMenuTrigger)({\n    type: \"listbox\",\n    isDisabled: isDisabled || isReadOnly\n  }, state, buttonRef);\n  // Set listbox id so it can be used when calling getItemId later\n  (0, $dShfP$listData).set(state, {\n    id: menuProps.id\n  });\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let delegate = (0, $dShfP$useMemo)(() => keyboardDelegate || new (0, $dShfP$ListKeyboardDelegate)(state.collection, state.disabledKeys, listBoxRef), [keyboardDelegate, state.collection, state.disabledKeys, listBoxRef]);\n  // Use useSelectableCollection to get the keyboard handlers to apply to the textfield\n  let {\n    collectionProps: collectionProps\n  } = (0, $dShfP$useSelectableCollection)({\n    selectionManager: state.selectionManager,\n    keyboardDelegate: delegate,\n    disallowTypeAhead: true,\n    disallowEmptySelection: true,\n    shouldFocusWrap: shouldFocusWrap,\n    ref: inputRef,\n    // Prevent item scroll behavior from being applied here, should be handled in the user's Popover + ListBox component\n    isVirtualized: true\n  });\n  let router = (0, $dShfP$useRouter)();\n  // For textfield specific keydown operations\n  let onKeyDown = e => {\n    switch (e.key) {\n      case \"Enter\":\n      case \"Tab\":\n        // Prevent form submission if menu is open since we may be selecting a option\n        if (state.isOpen && e.key === \"Enter\") e.preventDefault();\n        // If the focused item is a link, trigger opening it. Items that are links are not selectable.\n        if (state.isOpen && state.selectionManager.focusedKey != null && state.selectionManager.isLink(state.selectionManager.focusedKey)) {\n          if (e.key === \"Enter\") {\n            let item = listBoxRef.current.querySelector(`[data-key=\"${CSS.escape(state.selectionManager.focusedKey.toString())}\"]`);\n            if (item instanceof HTMLAnchorElement) {\n              let collectionItem = state.collection.getItem(state.selectionManager.focusedKey);\n              router.open(item, e, collectionItem.props.href, collectionItem.props.routerOptions);\n            }\n          }\n          state.close();\n        } else state.commit();\n        break;\n      case \"Escape\":\n        if (state.selectedKey !== null || state.inputValue === \"\" || props.allowsCustomValue) e.continuePropagation();\n        state.revert();\n        break;\n      case \"ArrowDown\":\n        state.open(\"first\", \"manual\");\n        break;\n      case \"ArrowUp\":\n        state.open(\"last\", \"manual\");\n        break;\n      case \"ArrowLeft\":\n      case \"ArrowRight\":\n        state.selectionManager.setFocusedKey(null);\n        break;\n    }\n  };\n  let onBlur = e => {\n    var _popoverRef_current;\n    let blurFromButton = (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) && buttonRef.current === e.relatedTarget;\n    let blurIntoPopover = (_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(e.relatedTarget);\n    // Ignore blur if focused moved to the button(if exists) or into the popover.\n    if (blurFromButton || blurIntoPopover) return;\n    if (props.onBlur) props.onBlur(e);\n    state.setFocused(false);\n  };\n  let onFocus = e => {\n    if (state.isFocused) return;\n    if (props.onFocus) props.onFocus(e);\n    state.setFocused(true);\n  };\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    inputProps: inputProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $dShfP$useTextField)({\n    ...props,\n    onChange: state.setInputValue,\n    onKeyDown: !isReadOnly ? (0, $dShfP$chain)(state.isOpen && collectionProps.onKeyDown, onKeyDown, props.onKeyDown) : props.onKeyDown,\n    onBlur: onBlur,\n    value: state.inputValue,\n    onFocus: onFocus,\n    autoComplete: \"off\",\n    validate: undefined,\n    [(0, $dShfP$privateValidationStateProp)]: state\n  }, inputRef);\n  // Press handlers for the ComboBox button\n  let onPress = e => {\n    if (e.pointerType === \"touch\") {\n      // Focus the input field in case it isn't focused yet\n      inputRef.current.focus();\n      state.toggle(null, \"manual\");\n    }\n  };\n  let onPressStart = e => {\n    if (e.pointerType !== \"touch\") {\n      inputRef.current.focus();\n      state.toggle(e.pointerType === \"keyboard\" || e.pointerType === \"virtual\" ? \"first\" : null, \"manual\");\n    }\n  };\n  let triggerLabelProps = (0, $dShfP$useLabels)({\n    id: menuTriggerProps.id,\n    \"aria-label\": stringFormatter.format(\"buttonLabel\"),\n    \"aria-labelledby\": props[\"aria-labelledby\"] || labelProps.id\n  });\n  let listBoxProps = (0, $dShfP$useLabels)({\n    id: menuProps.id,\n    \"aria-label\": stringFormatter.format(\"listboxLabel\"),\n    \"aria-labelledby\": props[\"aria-labelledby\"] || labelProps.id\n  });\n  // If a touch happens on direct center of ComboBox input, might be virtual click from iPad so open ComboBox menu\n  let lastEventTime = (0, $dShfP$useRef)(0);\n  let onTouchEnd = e => {\n    if (isDisabled || isReadOnly) return;\n    // Sometimes VoiceOver on iOS fires two touchend events in quick succession. Ignore the second one.\n    if (e.timeStamp - lastEventTime.current < 500) {\n      e.preventDefault();\n      inputRef.current.focus();\n      return;\n    }\n    let rect = e.target.getBoundingClientRect();\n    let touch = e.changedTouches[0];\n    let centerX = Math.ceil(rect.left + .5 * rect.width);\n    let centerY = Math.ceil(rect.top + .5 * rect.height);\n    if (touch.clientX === centerX && touch.clientY === centerY) {\n      e.preventDefault();\n      inputRef.current.focus();\n      state.toggle(null, \"manual\");\n      lastEventTime.current = e.timeStamp;\n    }\n  };\n  // VoiceOver has issues with announcing aria-activedescendant properly on change\n  // (especially on iOS). We use a live region announcer to announce focus changes\n  // manually. In addition, section titles are announced when navigating into a new section.\n  let focusedItem = state.selectionManager.focusedKey != null && state.isOpen ? state.collection.getItem(state.selectionManager.focusedKey) : undefined;\n  var _focusedItem_parentKey;\n  let sectionKey = (_focusedItem_parentKey = focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.parentKey) !== null && _focusedItem_parentKey !== void 0 ? _focusedItem_parentKey : null;\n  var _state_selectionManager_focusedKey;\n  let itemKey = (_state_selectionManager_focusedKey = state.selectionManager.focusedKey) !== null && _state_selectionManager_focusedKey !== void 0 ? _state_selectionManager_focusedKey : null;\n  let lastSection = (0, $dShfP$useRef)(sectionKey);\n  let lastItem = (0, $dShfP$useRef)(itemKey);\n  (0, $dShfP$useEffect)(() => {\n    if ((0, $dShfP$isAppleDevice)() && focusedItem != null && itemKey !== lastItem.current) {\n      let isSelected = state.selectionManager.isSelected(itemKey);\n      let section = sectionKey != null ? state.collection.getItem(sectionKey) : null;\n      let sectionTitle = (section === null || section === void 0 ? void 0 : section[\"aria-label\"]) || (typeof (section === null || section === void 0 ? void 0 : section.rendered) === \"string\" ? section.rendered : \"\") || \"\";\n      let announcement = stringFormatter.format(\"focusAnnouncement\", {\n        isGroupChange: section && sectionKey !== lastSection.current,\n        groupTitle: sectionTitle,\n        groupCount: section ? [...(0, $dShfP$getChildNodes)(section, state.collection)].length : 0,\n        optionText: focusedItem[\"aria-label\"] || focusedItem.textValue || \"\",\n        isSelected: isSelected\n      });\n      (0, $dShfP$announce)(announcement);\n    }\n    lastSection.current = sectionKey;\n    lastItem.current = itemKey;\n  });\n  // Announce the number of available suggestions when it changes\n  let optionCount = (0, $dShfP$getItemCount)(state.collection);\n  let lastSize = (0, $dShfP$useRef)(optionCount);\n  let lastOpen = (0, $dShfP$useRef)(state.isOpen);\n  (0, $dShfP$useEffect)(() => {\n    // Only announce the number of options available when the menu opens if there is no\n    // focused item, otherwise screen readers will typically read e.g. \"1 of 6\".\n    // The exception is VoiceOver since this isn't included in the message above.\n    let didOpenWithoutFocusedItem = state.isOpen !== lastOpen.current && (state.selectionManager.focusedKey == null || (0, $dShfP$isAppleDevice)());\n    if (state.isOpen && (didOpenWithoutFocusedItem || optionCount !== lastSize.current)) {\n      let announcement = stringFormatter.format(\"countAnnouncement\", {\n        optionCount: optionCount\n      });\n      (0, $dShfP$announce)(announcement);\n    }\n    lastSize.current = optionCount;\n    lastOpen.current = state.isOpen;\n  });\n  // Announce when a selection occurs for VoiceOver. Other screen readers typically do this automatically.\n  let lastSelectedKey = (0, $dShfP$useRef)(state.selectedKey);\n  (0, $dShfP$useEffect)(() => {\n    if ((0, $dShfP$isAppleDevice)() && state.isFocused && state.selectedItem && state.selectedKey !== lastSelectedKey.current) {\n      let optionText = state.selectedItem[\"aria-label\"] || state.selectedItem.textValue || \"\";\n      let announcement = stringFormatter.format(\"selectedAnnouncement\", {\n        optionText: optionText\n      });\n      (0, $dShfP$announce)(announcement);\n    }\n    lastSelectedKey.current = state.selectedKey;\n  });\n  (0, $dShfP$useEffect)(() => {\n    if (state.isOpen) return (0, $dShfP$ariaHideOutside)([inputRef.current, popoverRef.current]);\n  }, [state.isOpen, inputRef, popoverRef]);\n  return {\n    labelProps: labelProps,\n    buttonProps: {\n      ...menuTriggerProps,\n      ...triggerLabelProps,\n      excludeFromTabOrder: true,\n      onPress: onPress,\n      onPressStart: onPressStart,\n      isDisabled: isDisabled || isReadOnly\n    },\n    inputProps: (0, $dShfP$mergeProps)(inputProps, {\n      role: \"combobox\",\n      \"aria-expanded\": menuTriggerProps[\"aria-expanded\"],\n      \"aria-controls\": state.isOpen ? menuProps.id : undefined,\n      // TODO: readd proper logic for completionMode = complete (aria-autocomplete: both)\n      \"aria-autocomplete\": \"list\",\n      \"aria-activedescendant\": focusedItem ? (0, $dShfP$getItemId)(state, focusedItem.key) : undefined,\n      onTouchEnd: onTouchEnd,\n      // This disable's iOS's autocorrect suggestions, since the combo box provides its own suggestions.\n      autoCorrect: \"off\",\n      // This disable's the macOS Safari spell check auto corrections.\n      spellCheck: \"false\"\n    }),\n    listBoxProps: (0, $dShfP$mergeProps)(menuProps, listBoxProps, {\n      autoFocus: state.focusStrategy,\n      shouldUseVirtualFocus: true,\n      shouldSelectOnPressUp: true,\n      shouldFocusOnHover: true,\n      linkBehavior: \"selection\"\n    }),\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $c350ade66beef0af$export$8c18d1b4f7232bbf as useComboBox };","map":{"version":3,"names":["$dShfP$intlStringsmodulejs","announce","$dShfP$announce","ariaHideOutside","$dShfP$ariaHideOutside","listData","$dShfP$listData","getItemId","$dShfP$getItemId","useRouter","$dShfP$useRouter","chain","$dShfP$chain","useLabels","$dShfP$useLabels","isAppleDevice","$dShfP$isAppleDevice","mergeProps","$dShfP$mergeProps","useMemo","$dShfP$useMemo","useRef","$dShfP$useRef","useEffect","$dShfP$useEffect","getChildNodes","$dShfP$getChildNodes","getItemCount","$dShfP$getItemCount","ListKeyboardDelegate","$dShfP$ListKeyboardDelegate","useSelectableCollection","$dShfP$useSelectableCollection","privateValidationStateProp","$dShfP$privateValidationStateProp","useLocalizedStringFormatter","$dShfP$useLocalizedStringFormatter","useMenuTrigger","$dShfP$useMenuTrigger","useTextField","$dShfP$useTextField","$parcel$interopDefault","a","__esModule","default","$c350ade66beef0af$export$8c18d1b4f7232bbf","props","state","buttonRef","popoverRef","inputRef","listBoxRef","keyboardDelegate","shouldFocusWrap","isReadOnly","isDisabled","stringFormatter","menuTriggerProps","menuProps","type","set","id","delegate","collection","disabledKeys","collectionProps","selectionManager","disallowTypeAhead","disallowEmptySelection","ref","isVirtualized","router","onKeyDown","e","key","isOpen","preventDefault","focusedKey","isLink","item","current","querySelector","CSS","escape","toString","HTMLAnchorElement","collectionItem","getItem","open","href","routerOptions","close","commit","selectedKey","inputValue","allowsCustomValue","continuePropagation","revert","setFocusedKey","onBlur","_popoverRef_current","blurFromButton","relatedTarget","blurIntoPopover","contains","setFocused","onFocus","isFocused","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","inputProps","descriptionProps","errorMessageProps","onChange","setInputValue","value","autoComplete","validate","undefined","onPress","pointerType","focus","toggle","onPressStart","triggerLabelProps","format","listBoxProps","lastEventTime","onTouchEnd","timeStamp","rect","target","getBoundingClientRect","touch","changedTouches","centerX","Math","ceil","left","width","centerY","top","height","clientX","clientY","focusedItem","_focusedItem_parentKey","sectionKey","parentKey","_state_selectionManager_focusedKey","itemKey","lastSection","lastItem","isSelected","section","sectionTitle","rendered","announcement","isGroupChange","groupTitle","groupCount","length","optionText","textValue","optionCount","lastSize","lastOpen","didOpenWithoutFocusedItem","lastSelectedKey","selectedItem","buttonProps","excludeFromTabOrder","role","autoCorrect","spellCheck","autoFocus","focusStrategy","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","linkBehavior","useComboBox"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-aria/combobox/dist/useComboBox.mjs"],"sourcesContent":["import $dShfP$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport {announce as $dShfP$announce} from \"@react-aria/live-announcer\";\nimport {ariaHideOutside as $dShfP$ariaHideOutside} from \"@react-aria/overlays\";\nimport {listData as $dShfP$listData, getItemId as $dShfP$getItemId} from \"@react-aria/listbox\";\nimport {useRouter as $dShfP$useRouter, chain as $dShfP$chain, useLabels as $dShfP$useLabels, isAppleDevice as $dShfP$isAppleDevice, mergeProps as $dShfP$mergeProps} from \"@react-aria/utils\";\nimport {useMemo as $dShfP$useMemo, useRef as $dShfP$useRef, useEffect as $dShfP$useEffect} from \"react\";\nimport {getChildNodes as $dShfP$getChildNodes, getItemCount as $dShfP$getItemCount} from \"@react-stately/collections\";\nimport {ListKeyboardDelegate as $dShfP$ListKeyboardDelegate, useSelectableCollection as $dShfP$useSelectableCollection} from \"@react-aria/selection\";\nimport {privateValidationStateProp as $dShfP$privateValidationStateProp} from \"@react-stately/form\";\nimport {useLocalizedStringFormatter as $dShfP$useLocalizedStringFormatter} from \"@react-aria/i18n\";\nimport {useMenuTrigger as $dShfP$useMenuTrigger} from \"@react-aria/menu\";\nimport {useTextField as $dShfP$useTextField} from \"@react-aria/textfield\";\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\n\n\n\n\n\n\nfunction $c350ade66beef0af$export$8c18d1b4f7232bbf(props, state) {\n    let { buttonRef: buttonRef, popoverRef: popoverRef, inputRef: inputRef, listBoxRef: listBoxRef, keyboardDelegate: keyboardDelegate, shouldFocusWrap: // completionMode = 'suggest',\n    shouldFocusWrap, isReadOnly: isReadOnly, isDisabled: isDisabled } = props;\n    let stringFormatter = (0, $dShfP$useLocalizedStringFormatter)((0, ($parcel$interopDefault($dShfP$intlStringsmodulejs))), \"@react-aria/combobox\");\n    let { menuTriggerProps: menuTriggerProps, menuProps: menuProps } = (0, $dShfP$useMenuTrigger)({\n        type: \"listbox\",\n        isDisabled: isDisabled || isReadOnly\n    }, state, buttonRef);\n    // Set listbox id so it can be used when calling getItemId later\n    (0, $dShfP$listData).set(state, {\n        id: menuProps.id\n    });\n    // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n    // When virtualized, the layout object will be passed in as a prop and override this.\n    let delegate = (0, $dShfP$useMemo)(()=>keyboardDelegate || new (0, $dShfP$ListKeyboardDelegate)(state.collection, state.disabledKeys, listBoxRef), [\n        keyboardDelegate,\n        state.collection,\n        state.disabledKeys,\n        listBoxRef\n    ]);\n    // Use useSelectableCollection to get the keyboard handlers to apply to the textfield\n    let { collectionProps: collectionProps } = (0, $dShfP$useSelectableCollection)({\n        selectionManager: state.selectionManager,\n        keyboardDelegate: delegate,\n        disallowTypeAhead: true,\n        disallowEmptySelection: true,\n        shouldFocusWrap: shouldFocusWrap,\n        ref: inputRef,\n        // Prevent item scroll behavior from being applied here, should be handled in the user's Popover + ListBox component\n        isVirtualized: true\n    });\n    let router = (0, $dShfP$useRouter)();\n    // For textfield specific keydown operations\n    let onKeyDown = (e)=>{\n        switch(e.key){\n            case \"Enter\":\n            case \"Tab\":\n                // Prevent form submission if menu is open since we may be selecting a option\n                if (state.isOpen && e.key === \"Enter\") e.preventDefault();\n                // If the focused item is a link, trigger opening it. Items that are links are not selectable.\n                if (state.isOpen && state.selectionManager.focusedKey != null && state.selectionManager.isLink(state.selectionManager.focusedKey)) {\n                    if (e.key === \"Enter\") {\n                        let item = listBoxRef.current.querySelector(`[data-key=\"${CSS.escape(state.selectionManager.focusedKey.toString())}\"]`);\n                        if (item instanceof HTMLAnchorElement) {\n                            let collectionItem = state.collection.getItem(state.selectionManager.focusedKey);\n                            router.open(item, e, collectionItem.props.href, collectionItem.props.routerOptions);\n                        }\n                    }\n                    state.close();\n                } else state.commit();\n                break;\n            case \"Escape\":\n                if (state.selectedKey !== null || state.inputValue === \"\" || props.allowsCustomValue) e.continuePropagation();\n                state.revert();\n                break;\n            case \"ArrowDown\":\n                state.open(\"first\", \"manual\");\n                break;\n            case \"ArrowUp\":\n                state.open(\"last\", \"manual\");\n                break;\n            case \"ArrowLeft\":\n            case \"ArrowRight\":\n                state.selectionManager.setFocusedKey(null);\n                break;\n        }\n    };\n    let onBlur = (e)=>{\n        var _popoverRef_current;\n        let blurFromButton = (buttonRef === null || buttonRef === void 0 ? void 0 : buttonRef.current) && buttonRef.current === e.relatedTarget;\n        let blurIntoPopover = (_popoverRef_current = popoverRef.current) === null || _popoverRef_current === void 0 ? void 0 : _popoverRef_current.contains(e.relatedTarget);\n        // Ignore blur if focused moved to the button(if exists) or into the popover.\n        if (blurFromButton || blurIntoPopover) return;\n        if (props.onBlur) props.onBlur(e);\n        state.setFocused(false);\n    };\n    let onFocus = (e)=>{\n        if (state.isFocused) return;\n        if (props.onFocus) props.onFocus(e);\n        state.setFocused(true);\n    };\n    let { isInvalid: isInvalid, validationErrors: validationErrors, validationDetails: validationDetails } = state.displayValidation;\n    let { labelProps: labelProps, inputProps: inputProps, descriptionProps: descriptionProps, errorMessageProps: errorMessageProps } = (0, $dShfP$useTextField)({\n        ...props,\n        onChange: state.setInputValue,\n        onKeyDown: !isReadOnly ? (0, $dShfP$chain)(state.isOpen && collectionProps.onKeyDown, onKeyDown, props.onKeyDown) : props.onKeyDown,\n        onBlur: onBlur,\n        value: state.inputValue,\n        onFocus: onFocus,\n        autoComplete: \"off\",\n        validate: undefined,\n        [(0, $dShfP$privateValidationStateProp)]: state\n    }, inputRef);\n    // Press handlers for the ComboBox button\n    let onPress = (e)=>{\n        if (e.pointerType === \"touch\") {\n            // Focus the input field in case it isn't focused yet\n            inputRef.current.focus();\n            state.toggle(null, \"manual\");\n        }\n    };\n    let onPressStart = (e)=>{\n        if (e.pointerType !== \"touch\") {\n            inputRef.current.focus();\n            state.toggle(e.pointerType === \"keyboard\" || e.pointerType === \"virtual\" ? \"first\" : null, \"manual\");\n        }\n    };\n    let triggerLabelProps = (0, $dShfP$useLabels)({\n        id: menuTriggerProps.id,\n        \"aria-label\": stringFormatter.format(\"buttonLabel\"),\n        \"aria-labelledby\": props[\"aria-labelledby\"] || labelProps.id\n    });\n    let listBoxProps = (0, $dShfP$useLabels)({\n        id: menuProps.id,\n        \"aria-label\": stringFormatter.format(\"listboxLabel\"),\n        \"aria-labelledby\": props[\"aria-labelledby\"] || labelProps.id\n    });\n    // If a touch happens on direct center of ComboBox input, might be virtual click from iPad so open ComboBox menu\n    let lastEventTime = (0, $dShfP$useRef)(0);\n    let onTouchEnd = (e)=>{\n        if (isDisabled || isReadOnly) return;\n        // Sometimes VoiceOver on iOS fires two touchend events in quick succession. Ignore the second one.\n        if (e.timeStamp - lastEventTime.current < 500) {\n            e.preventDefault();\n            inputRef.current.focus();\n            return;\n        }\n        let rect = e.target.getBoundingClientRect();\n        let touch = e.changedTouches[0];\n        let centerX = Math.ceil(rect.left + .5 * rect.width);\n        let centerY = Math.ceil(rect.top + .5 * rect.height);\n        if (touch.clientX === centerX && touch.clientY === centerY) {\n            e.preventDefault();\n            inputRef.current.focus();\n            state.toggle(null, \"manual\");\n            lastEventTime.current = e.timeStamp;\n        }\n    };\n    // VoiceOver has issues with announcing aria-activedescendant properly on change\n    // (especially on iOS). We use a live region announcer to announce focus changes\n    // manually. In addition, section titles are announced when navigating into a new section.\n    let focusedItem = state.selectionManager.focusedKey != null && state.isOpen ? state.collection.getItem(state.selectionManager.focusedKey) : undefined;\n    var _focusedItem_parentKey;\n    let sectionKey = (_focusedItem_parentKey = focusedItem === null || focusedItem === void 0 ? void 0 : focusedItem.parentKey) !== null && _focusedItem_parentKey !== void 0 ? _focusedItem_parentKey : null;\n    var _state_selectionManager_focusedKey;\n    let itemKey = (_state_selectionManager_focusedKey = state.selectionManager.focusedKey) !== null && _state_selectionManager_focusedKey !== void 0 ? _state_selectionManager_focusedKey : null;\n    let lastSection = (0, $dShfP$useRef)(sectionKey);\n    let lastItem = (0, $dShfP$useRef)(itemKey);\n    (0, $dShfP$useEffect)(()=>{\n        if ((0, $dShfP$isAppleDevice)() && focusedItem != null && itemKey !== lastItem.current) {\n            let isSelected = state.selectionManager.isSelected(itemKey);\n            let section = sectionKey != null ? state.collection.getItem(sectionKey) : null;\n            let sectionTitle = (section === null || section === void 0 ? void 0 : section[\"aria-label\"]) || (typeof (section === null || section === void 0 ? void 0 : section.rendered) === \"string\" ? section.rendered : \"\") || \"\";\n            let announcement = stringFormatter.format(\"focusAnnouncement\", {\n                isGroupChange: section && sectionKey !== lastSection.current,\n                groupTitle: sectionTitle,\n                groupCount: section ? [\n                    ...(0, $dShfP$getChildNodes)(section, state.collection)\n                ].length : 0,\n                optionText: focusedItem[\"aria-label\"] || focusedItem.textValue || \"\",\n                isSelected: isSelected\n            });\n            (0, $dShfP$announce)(announcement);\n        }\n        lastSection.current = sectionKey;\n        lastItem.current = itemKey;\n    });\n    // Announce the number of available suggestions when it changes\n    let optionCount = (0, $dShfP$getItemCount)(state.collection);\n    let lastSize = (0, $dShfP$useRef)(optionCount);\n    let lastOpen = (0, $dShfP$useRef)(state.isOpen);\n    (0, $dShfP$useEffect)(()=>{\n        // Only announce the number of options available when the menu opens if there is no\n        // focused item, otherwise screen readers will typically read e.g. \"1 of 6\".\n        // The exception is VoiceOver since this isn't included in the message above.\n        let didOpenWithoutFocusedItem = state.isOpen !== lastOpen.current && (state.selectionManager.focusedKey == null || (0, $dShfP$isAppleDevice)());\n        if (state.isOpen && (didOpenWithoutFocusedItem || optionCount !== lastSize.current)) {\n            let announcement = stringFormatter.format(\"countAnnouncement\", {\n                optionCount: optionCount\n            });\n            (0, $dShfP$announce)(announcement);\n        }\n        lastSize.current = optionCount;\n        lastOpen.current = state.isOpen;\n    });\n    // Announce when a selection occurs for VoiceOver. Other screen readers typically do this automatically.\n    let lastSelectedKey = (0, $dShfP$useRef)(state.selectedKey);\n    (0, $dShfP$useEffect)(()=>{\n        if ((0, $dShfP$isAppleDevice)() && state.isFocused && state.selectedItem && state.selectedKey !== lastSelectedKey.current) {\n            let optionText = state.selectedItem[\"aria-label\"] || state.selectedItem.textValue || \"\";\n            let announcement = stringFormatter.format(\"selectedAnnouncement\", {\n                optionText: optionText\n            });\n            (0, $dShfP$announce)(announcement);\n        }\n        lastSelectedKey.current = state.selectedKey;\n    });\n    (0, $dShfP$useEffect)(()=>{\n        if (state.isOpen) return (0, $dShfP$ariaHideOutside)([\n            inputRef.current,\n            popoverRef.current\n        ]);\n    }, [\n        state.isOpen,\n        inputRef,\n        popoverRef\n    ]);\n    return {\n        labelProps: labelProps,\n        buttonProps: {\n            ...menuTriggerProps,\n            ...triggerLabelProps,\n            excludeFromTabOrder: true,\n            onPress: onPress,\n            onPressStart: onPressStart,\n            isDisabled: isDisabled || isReadOnly\n        },\n        inputProps: (0, $dShfP$mergeProps)(inputProps, {\n            role: \"combobox\",\n            \"aria-expanded\": menuTriggerProps[\"aria-expanded\"],\n            \"aria-controls\": state.isOpen ? menuProps.id : undefined,\n            // TODO: readd proper logic for completionMode = complete (aria-autocomplete: both)\n            \"aria-autocomplete\": \"list\",\n            \"aria-activedescendant\": focusedItem ? (0, $dShfP$getItemId)(state, focusedItem.key) : undefined,\n            onTouchEnd: onTouchEnd,\n            // This disable's iOS's autocorrect suggestions, since the combo box provides its own suggestions.\n            autoCorrect: \"off\",\n            // This disable's the macOS Safari spell check auto corrections.\n            spellCheck: \"false\"\n        }),\n        listBoxProps: (0, $dShfP$mergeProps)(menuProps, listBoxProps, {\n            autoFocus: state.focusStrategy,\n            shouldUseVirtualFocus: true,\n            shouldSelectOnPressUp: true,\n            shouldFocusOnHover: true,\n            linkBehavior: \"selection\"\n        }),\n        descriptionProps: descriptionProps,\n        errorMessageProps: errorMessageProps,\n        isInvalid: isInvalid,\n        validationErrors: validationErrors,\n        validationDetails: validationDetails\n    };\n}\n\n\nexport {$c350ade66beef0af$export$8c18d1b4f7232bbf as useComboBox};\n//# sourceMappingURL=useComboBox.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}