{"ast":null,"code":"/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */const $5b160d28a433310d$var$localeSymbol = Symbol.for(\"react-aria.i18n.locale\");\nconst $5b160d28a433310d$var$stringsSymbol = Symbol.for(\"react-aria.i18n.strings\");\nlet $5b160d28a433310d$var$cachedGlobalStrings = undefined;\nclass $5b160d28a433310d$export$c17fa47878dc55b6 {\n  /** Returns a localized string for the given key and locale. */getStringForLocale(key, locale) {\n    let strings = this.getStringsForLocale(locale);\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n  /** Returns all localized strings for the given locale. */\n  getStringsForLocale(locale) {\n    let strings = this.strings[locale];\n    if (!strings) {\n      strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n      this.strings[locale] = strings;\n    }\n    return strings;\n  }\n  static getGlobalDictionaryForPackage(packageName) {\n    if (typeof window === \"undefined\") return null;\n    let locale = window[$5b160d28a433310d$var$localeSymbol];\n    if ($5b160d28a433310d$var$cachedGlobalStrings === undefined) {\n      let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];\n      if (!globalStrings) return null;\n      $5b160d28a433310d$var$cachedGlobalStrings = {};\n      for (let pkg in globalStrings) $5b160d28a433310d$var$cachedGlobalStrings[pkg] = new $5b160d28a433310d$export$c17fa47878dc55b6({\n        [locale]: globalStrings[pkg]\n      }, locale);\n    }\n    let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];\n    if (!dictionary) throw new Error(`Strings for package \"${packageName}\" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);\n    return dictionary;\n  }\n  constructor(messages, defaultLocale = \"en-US\") {\n    // Clone messages so we don't modify the original object.\n    // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n    this.strings = Object.fromEntries(Object.entries(messages).filter(([, v]) => v));\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $5b160d28a433310d$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\nexport { $5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary };","map":{"version":3,"names":["$5b160d28a433310d$var$localeSymbol","Symbol","for","$5b160d28a433310d$var$stringsSymbol","$5b160d28a433310d$var$cachedGlobalStrings","undefined","$5b160d28a433310d$export$c17fa47878dc55b6","getStringForLocale","key","locale","strings","getStringsForLocale","string","Error","$5b160d28a433310d$var$getStringsForLocale","defaultLocale","getGlobalDictionaryForPackage","packageName","window","globalStrings","pkg","dictionary","constructor","messages","Object","fromEntries","entries","filter","v","language","$5b160d28a433310d$var$getLanguage","startsWith","Intl","Locale","split","LocalizedStringDictionary"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@internationalized/string/dist/LocalizedStringDictionary.mjs"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ const $5b160d28a433310d$var$localeSymbol = Symbol.for(\"react-aria.i18n.locale\");\nconst $5b160d28a433310d$var$stringsSymbol = Symbol.for(\"react-aria.i18n.strings\");\nlet $5b160d28a433310d$var$cachedGlobalStrings = undefined;\nclass $5b160d28a433310d$export$c17fa47878dc55b6 {\n    /** Returns a localized string for the given key and locale. */ getStringForLocale(key, locale) {\n        let strings = this.getStringsForLocale(locale);\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    /** Returns all localized strings for the given locale. */ getStringsForLocale(locale) {\n        let strings = this.strings[locale];\n        if (!strings) {\n            strings = $5b160d28a433310d$var$getStringsForLocale(locale, this.strings, this.defaultLocale);\n            this.strings[locale] = strings;\n        }\n        return strings;\n    }\n    static getGlobalDictionaryForPackage(packageName) {\n        if (typeof window === \"undefined\") return null;\n        let locale = window[$5b160d28a433310d$var$localeSymbol];\n        if ($5b160d28a433310d$var$cachedGlobalStrings === undefined) {\n            let globalStrings = window[$5b160d28a433310d$var$stringsSymbol];\n            if (!globalStrings) return null;\n            $5b160d28a433310d$var$cachedGlobalStrings = {};\n            for(let pkg in globalStrings)$5b160d28a433310d$var$cachedGlobalStrings[pkg] = new $5b160d28a433310d$export$c17fa47878dc55b6({\n                [locale]: globalStrings[pkg]\n            }, locale);\n        }\n        let dictionary = $5b160d28a433310d$var$cachedGlobalStrings === null || $5b160d28a433310d$var$cachedGlobalStrings === void 0 ? void 0 : $5b160d28a433310d$var$cachedGlobalStrings[packageName];\n        if (!dictionary) throw new Error(`Strings for package \"${packageName}\" were not included by LocalizedStringProvider. Please add it to the list passed to createLocalizedStringDictionary.`);\n        return dictionary;\n    }\n    constructor(messages, defaultLocale = \"en-US\"){\n        // Clone messages so we don't modify the original object.\n        // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n        this.strings = Object.fromEntries(Object.entries(messages).filter(([, v])=>v));\n        this.defaultLocale = defaultLocale;\n    }\n}\nfunction $5b160d28a433310d$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n    // If there is an exact match, use it.\n    if (strings[locale]) return strings[locale];\n    // Attempt to find the closest match by language.\n    // For example, if the locale is fr-CA (French Canadian), but there is only\n    // an fr-FR (France) set of strings, use that.\n    // This could be replaced with Intl.LocaleMatcher once it is supported.\n    // https://github.com/tc39/proposal-intl-localematcher\n    let language = $5b160d28a433310d$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + \"-\")) return strings[key];\n    }\n    // Nothing close, use english.\n    return strings[defaultLocale];\n}\nfunction $5b160d28a433310d$var$getLanguage(locale) {\n    // @ts-ignore\n    if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n    return locale.split(\"-\")[0];\n}\n\n\nexport {$5b160d28a433310d$export$c17fa47878dc55b6 as LocalizedStringDictionary};\n//# sourceMappingURL=LocalizedStringDictionary.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}