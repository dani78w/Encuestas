{"ast":null,"code":"import { getColumnHeaderId as $2140fb2337097f2d$export$37cd4213f2ad742e } from \"./utils.mjs\";\nimport $d9Rqy$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useRef as $d9Rqy$useRef, useCallback as $d9Rqy$useCallback, useEffect as $d9Rqy$useEffect } from \"react\";\nimport { focusSafely as $d9Rqy$focusSafely } from \"@react-aria/focus\";\nimport { useId as $d9Rqy$useId, useEffectEvent as $d9Rqy$useEffectEvent, useDescription as $d9Rqy$useDescription, mergeProps as $d9Rqy$mergeProps } from \"@react-aria/utils\";\nimport { useKeyboard as $d9Rqy$useKeyboard, useMove as $d9Rqy$useMove, useInteractionModality as $d9Rqy$useInteractionModality, usePress as $d9Rqy$usePress } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $d9Rqy$useLocalizedStringFormatter, useLocale as $d9Rqy$useLocale } from \"@react-aria/i18n\";\nimport { useVisuallyHidden as $d9Rqy$useVisuallyHidden } from \"@react-aria/visually-hidden\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $e91ef4e5004e3774$export$52994e973806c219(props, state, ref) {\n  let {\n    column: item,\n    triggerRef: triggerRef,\n    isDisabled: isDisabled,\n    onResizeStart: onResizeStart,\n    onResize: onResize,\n    onResizeEnd: onResizeEnd,\n    \"aria-label\": ariaLabel\n  } = props;\n  const stringFormatter = (0, $d9Rqy$useLocalizedStringFormatter)((0, $parcel$interopDefault($d9Rqy$intlStringsmodulejs)), \"@react-aria/table\");\n  let id = (0, $d9Rqy$useId)();\n  let isResizing = state.resizingColumn === item.key;\n  let isResizingRef = (0, $d9Rqy$useRef)(isResizing);\n  let lastSize = (0, $d9Rqy$useRef)(null);\n  let wasFocusedOnResizeStart = (0, $d9Rqy$useRef)(false);\n  let editModeEnabled = state.tableState.isKeyboardNavigationDisabled;\n  let {\n    direction: direction\n  } = (0, $d9Rqy$useLocale)();\n  let {\n    keyboardProps: keyboardProps\n  } = (0, $d9Rqy$useKeyboard)({\n    onKeyDown: e => {\n      if (editModeEnabled) {\n        if (e.key === \"Escape\" || e.key === \"Enter\" || e.key === \" \" || e.key === \"Tab\") {\n          e.preventDefault();\n          endResize(item);\n        }\n      } else {\n        // Continue propagation on keydown events so they still bubbles to useSelectableCollection and are handled there\n        e.continuePropagation();\n        if (e.key === \"Enter\") startResize(item);\n      }\n    }\n  });\n  let startResize = (0, $d9Rqy$useEffectEvent)(item => {\n    if (!isResizingRef.current) {\n      lastSize.current = state.updateResizedColumns(item.key, state.getColumnWidth(item.key));\n      state.startResize(item.key);\n      state.tableState.setKeyboardNavigationDisabled(true);\n      onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(lastSize.current);\n    }\n    isResizingRef.current = true;\n  });\n  let resize = (0, $d9Rqy$useEffectEvent)((item, newWidth) => {\n    let sizes = state.updateResizedColumns(item.key, newWidth);\n    onResize === null || onResize === void 0 ? void 0 : onResize(sizes);\n    lastSize.current = sizes;\n  });\n  let endResize = (0, $d9Rqy$useEffectEvent)(item => {\n    if (isResizingRef.current) {\n      if (lastSize.current == null) lastSize.current = state.updateResizedColumns(item.key, state.getColumnWidth(item.key));\n      state.endResize();\n      state.tableState.setKeyboardNavigationDisabled(false);\n      onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(lastSize.current);\n      isResizingRef.current = false;\n      if ((triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) && !wasFocusedOnResizeStart.current)\n        // switch focus back to the column header unless the resizer was already focused when resizing started.\n        (0, $d9Rqy$focusSafely)(triggerRef.current);\n    }\n    lastSize.current = null;\n  });\n  const columnResizeWidthRef = (0, $d9Rqy$useRef)(0);\n  const {\n    moveProps: moveProps\n  } = (0, $d9Rqy$useMove)({\n    onMoveStart() {\n      columnResizeWidthRef.current = state.getColumnWidth(item.key);\n      startResize(item);\n    },\n    onMove(e) {\n      let {\n        deltaX: deltaX,\n        deltaY: deltaY,\n        pointerType: pointerType\n      } = e;\n      if (direction === \"rtl\") deltaX *= -1;\n      if (pointerType === \"keyboard\") {\n        if (deltaY !== 0 && deltaX === 0) deltaX = deltaY * -1;\n        deltaX *= 10;\n      }\n      // if moving up/down only, no need to resize\n      if (deltaX !== 0) {\n        columnResizeWidthRef.current += deltaX;\n        resize(item, columnResizeWidthRef.current);\n      }\n    },\n    onMoveEnd(e) {\n      let {\n        pointerType: pointerType\n      } = e;\n      columnResizeWidthRef.current = 0;\n      if (pointerType === \"mouse\" || pointerType === \"touch\" && wasFocusedOnResizeStart.current) endResize(item);\n    }\n  });\n  let onKeyDown = (0, $d9Rqy$useCallback)(e => {\n    if (editModeEnabled) moveProps.onKeyDown(e);\n  }, [editModeEnabled, moveProps]);\n  let min = Math.floor(state.getColumnMinWidth(item.key));\n  let max = Math.floor(state.getColumnMaxWidth(item.key));\n  if (max === Infinity) max = Number.MAX_SAFE_INTEGER;\n  let value = Math.floor(state.getColumnWidth(item.key));\n  let modality = (0, $d9Rqy$useInteractionModality)();\n  if (modality === \"virtual\" && typeof window !== \"undefined\" && \"ontouchstart\" in window) modality = \"touch\";\n  let description = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) == null && (modality === \"keyboard\" || modality === \"virtual\") && !isResizing ? stringFormatter.format(\"resizerDescription\") : undefined;\n  let descriptionProps = (0, $d9Rqy$useDescription)(description);\n  let ariaProps = {\n    \"aria-label\": ariaLabel,\n    \"aria-orientation\": \"horizontal\",\n    \"aria-labelledby\": `${id} ${(0, $2140fb2337097f2d$export$37cd4213f2ad742e)(state.tableState, item.key)}`,\n    \"aria-valuetext\": stringFormatter.format(\"columnSize\", {\n      value: value\n    }),\n    \"type\": \"range\",\n    min: min,\n    max: max,\n    value: value,\n    ...descriptionProps\n  };\n  const focusInput = (0, $d9Rqy$useCallback)(() => {\n    if (ref.current) (0, $d9Rqy$focusSafely)(ref.current);\n  }, [ref]);\n  let resizingColumn = state.resizingColumn;\n  let prevResizingColumn = (0, $d9Rqy$useRef)(null);\n  (0, $d9Rqy$useEffect)(() => {\n    if (prevResizingColumn.current !== resizingColumn && resizingColumn != null && resizingColumn === item.key) {\n      wasFocusedOnResizeStart.current = document.activeElement === ref.current;\n      startResize(item);\n      // Delay focusing input until Android Chrome's delayed click after touchend happens: https://bugs.chromium.org/p/chromium/issues/detail?id=1150073\n      let timeout = setTimeout(() => focusInput(), 0);\n      // VoiceOver on iOS has problems focusing the input from a menu.\n      let VOTimeout = setTimeout(focusInput, 400);\n      return () => {\n        clearTimeout(timeout);\n        clearTimeout(VOTimeout);\n      };\n    }\n    prevResizingColumn.current = resizingColumn;\n  }, [resizingColumn, item, focusInput, ref, startResize]);\n  let onChange = e => {\n    let currentWidth = state.getColumnWidth(item.key);\n    let nextValue = parseFloat(e.target.value);\n    if (nextValue > currentWidth) nextValue = currentWidth + 10;else nextValue = currentWidth - 10;\n    resize(item, nextValue);\n  };\n  let {\n    pressProps: pressProps\n  } = (0, $d9Rqy$usePress)({\n    onPressStart: e => {\n      if (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey || e.pointerType === \"keyboard\") return;\n      if (e.pointerType === \"virtual\" && state.resizingColumn != null) {\n        endResize(item);\n        return;\n      }\n      // Sometimes onPress won't trigger for quick taps on mobile so we want to focus the input so blurring away\n      // can cancel resize mode for us.\n      focusInput();\n      // If resizer is always visible, mobile screenreader user can access the visually hidden resizer directly and thus we don't need\n      // to handle a virtual click to start the resizer.\n      if (e.pointerType !== \"virtual\") startResize(item);\n    },\n    onPress: e => {\n      if ((e.pointerType === \"touch\" && wasFocusedOnResizeStart.current || e.pointerType === \"mouse\") && state.resizingColumn != null) endResize(item);\n    }\n  });\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = (0, $d9Rqy$useVisuallyHidden)();\n  return {\n    resizerProps: (0, $d9Rqy$mergeProps)(keyboardProps, {\n      ...moveProps,\n      onKeyDown: onKeyDown\n    }, pressProps, {\n      style: {\n        touchAction: \"none\"\n      }\n    }),\n    inputProps: (0, $d9Rqy$mergeProps)(visuallyHiddenProps, {\n      id: id,\n      onBlur: () => {\n        endResize(item);\n      },\n      onChange: onChange,\n      disabled: isDisabled\n    }, ariaProps),\n    isResizing: isResizing\n  };\n}\nexport { $e91ef4e5004e3774$export$52994e973806c219 as useTableColumnResize };","map":{"version":3,"names":["getColumnHeaderId","$2140fb2337097f2d$export$37cd4213f2ad742e","$d9Rqy$intlStringsmodulejs","useRef","$d9Rqy$useRef","useCallback","$d9Rqy$useCallback","useEffect","$d9Rqy$useEffect","focusSafely","$d9Rqy$focusSafely","useId","$d9Rqy$useId","useEffectEvent","$d9Rqy$useEffectEvent","useDescription","$d9Rqy$useDescription","mergeProps","$d9Rqy$mergeProps","useKeyboard","$d9Rqy$useKeyboard","useMove","$d9Rqy$useMove","useInteractionModality","$d9Rqy$useInteractionModality","usePress","$d9Rqy$usePress","useLocalizedStringFormatter","$d9Rqy$useLocalizedStringFormatter","useLocale","$d9Rqy$useLocale","useVisuallyHidden","$d9Rqy$useVisuallyHidden","$parcel$interopDefault","a","__esModule","default","$e91ef4e5004e3774$export$52994e973806c219","props","state","ref","column","item","triggerRef","isDisabled","onResizeStart","onResize","onResizeEnd","ariaLabel","stringFormatter","id","isResizing","resizingColumn","key","isResizingRef","lastSize","wasFocusedOnResizeStart","editModeEnabled","tableState","isKeyboardNavigationDisabled","direction","keyboardProps","onKeyDown","e","preventDefault","endResize","continuePropagation","startResize","current","updateResizedColumns","getColumnWidth","setKeyboardNavigationDisabled","resize","newWidth","sizes","columnResizeWidthRef","moveProps","onMoveStart","onMove","deltaX","deltaY","pointerType","onMoveEnd","min","Math","floor","getColumnMinWidth","max","getColumnMaxWidth","Infinity","Number","MAX_SAFE_INTEGER","value","modality","window","description","format","undefined","descriptionProps","ariaProps","focusInput","prevResizingColumn","document","activeElement","timeout","setTimeout","VOTimeout","clearTimeout","onChange","currentWidth","nextValue","parseFloat","target","pressProps","onPressStart","ctrlKey","altKey","metaKey","shiftKey","onPress","visuallyHiddenProps","resizerProps","style","touchAction","inputProps","onBlur","disabled","useTableColumnResize"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-aria/table/dist/useTableColumnResize.mjs"],"sourcesContent":["import {getColumnHeaderId as $2140fb2337097f2d$export$37cd4213f2ad742e} from \"./utils.mjs\";\nimport $d9Rqy$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport {useRef as $d9Rqy$useRef, useCallback as $d9Rqy$useCallback, useEffect as $d9Rqy$useEffect} from \"react\";\nimport {focusSafely as $d9Rqy$focusSafely} from \"@react-aria/focus\";\nimport {useId as $d9Rqy$useId, useEffectEvent as $d9Rqy$useEffectEvent, useDescription as $d9Rqy$useDescription, mergeProps as $d9Rqy$mergeProps} from \"@react-aria/utils\";\nimport {useKeyboard as $d9Rqy$useKeyboard, useMove as $d9Rqy$useMove, useInteractionModality as $d9Rqy$useInteractionModality, usePress as $d9Rqy$usePress} from \"@react-aria/interactions\";\nimport {useLocalizedStringFormatter as $d9Rqy$useLocalizedStringFormatter, useLocale as $d9Rqy$useLocale} from \"@react-aria/i18n\";\nimport {useVisuallyHidden as $d9Rqy$useVisuallyHidden} from \"@react-aria/visually-hidden\";\n\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\n\n\nfunction $e91ef4e5004e3774$export$52994e973806c219(props, state, ref) {\n    let { column: item, triggerRef: triggerRef, isDisabled: isDisabled, onResizeStart: onResizeStart, onResize: onResize, onResizeEnd: onResizeEnd, \"aria-label\": ariaLabel } = props;\n    const stringFormatter = (0, $d9Rqy$useLocalizedStringFormatter)((0, ($parcel$interopDefault($d9Rqy$intlStringsmodulejs))), \"@react-aria/table\");\n    let id = (0, $d9Rqy$useId)();\n    let isResizing = state.resizingColumn === item.key;\n    let isResizingRef = (0, $d9Rqy$useRef)(isResizing);\n    let lastSize = (0, $d9Rqy$useRef)(null);\n    let wasFocusedOnResizeStart = (0, $d9Rqy$useRef)(false);\n    let editModeEnabled = state.tableState.isKeyboardNavigationDisabled;\n    let { direction: direction } = (0, $d9Rqy$useLocale)();\n    let { keyboardProps: keyboardProps } = (0, $d9Rqy$useKeyboard)({\n        onKeyDown: (e)=>{\n            if (editModeEnabled) {\n                if (e.key === \"Escape\" || e.key === \"Enter\" || e.key === \" \" || e.key === \"Tab\") {\n                    e.preventDefault();\n                    endResize(item);\n                }\n            } else {\n                // Continue propagation on keydown events so they still bubbles to useSelectableCollection and are handled there\n                e.continuePropagation();\n                if (e.key === \"Enter\") startResize(item);\n            }\n        }\n    });\n    let startResize = (0, $d9Rqy$useEffectEvent)((item)=>{\n        if (!isResizingRef.current) {\n            lastSize.current = state.updateResizedColumns(item.key, state.getColumnWidth(item.key));\n            state.startResize(item.key);\n            state.tableState.setKeyboardNavigationDisabled(true);\n            onResizeStart === null || onResizeStart === void 0 ? void 0 : onResizeStart(lastSize.current);\n        }\n        isResizingRef.current = true;\n    });\n    let resize = (0, $d9Rqy$useEffectEvent)((item, newWidth)=>{\n        let sizes = state.updateResizedColumns(item.key, newWidth);\n        onResize === null || onResize === void 0 ? void 0 : onResize(sizes);\n        lastSize.current = sizes;\n    });\n    let endResize = (0, $d9Rqy$useEffectEvent)((item)=>{\n        if (isResizingRef.current) {\n            if (lastSize.current == null) lastSize.current = state.updateResizedColumns(item.key, state.getColumnWidth(item.key));\n            state.endResize();\n            state.tableState.setKeyboardNavigationDisabled(false);\n            onResizeEnd === null || onResizeEnd === void 0 ? void 0 : onResizeEnd(lastSize.current);\n            isResizingRef.current = false;\n            if ((triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) && !wasFocusedOnResizeStart.current) // switch focus back to the column header unless the resizer was already focused when resizing started.\n            (0, $d9Rqy$focusSafely)(triggerRef.current);\n        }\n        lastSize.current = null;\n    });\n    const columnResizeWidthRef = (0, $d9Rqy$useRef)(0);\n    const { moveProps: moveProps } = (0, $d9Rqy$useMove)({\n        onMoveStart () {\n            columnResizeWidthRef.current = state.getColumnWidth(item.key);\n            startResize(item);\n        },\n        onMove (e) {\n            let { deltaX: deltaX, deltaY: deltaY, pointerType: pointerType } = e;\n            if (direction === \"rtl\") deltaX *= -1;\n            if (pointerType === \"keyboard\") {\n                if (deltaY !== 0 && deltaX === 0) deltaX = deltaY * -1;\n                deltaX *= 10;\n            }\n            // if moving up/down only, no need to resize\n            if (deltaX !== 0) {\n                columnResizeWidthRef.current += deltaX;\n                resize(item, columnResizeWidthRef.current);\n            }\n        },\n        onMoveEnd (e) {\n            let { pointerType: pointerType } = e;\n            columnResizeWidthRef.current = 0;\n            if (pointerType === \"mouse\" || pointerType === \"touch\" && wasFocusedOnResizeStart.current) endResize(item);\n        }\n    });\n    let onKeyDown = (0, $d9Rqy$useCallback)((e)=>{\n        if (editModeEnabled) moveProps.onKeyDown(e);\n    }, [\n        editModeEnabled,\n        moveProps\n    ]);\n    let min = Math.floor(state.getColumnMinWidth(item.key));\n    let max = Math.floor(state.getColumnMaxWidth(item.key));\n    if (max === Infinity) max = Number.MAX_SAFE_INTEGER;\n    let value = Math.floor(state.getColumnWidth(item.key));\n    let modality = (0, $d9Rqy$useInteractionModality)();\n    if (modality === \"virtual\" && typeof window !== \"undefined\" && \"ontouchstart\" in window) modality = \"touch\";\n    let description = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) == null && (modality === \"keyboard\" || modality === \"virtual\") && !isResizing ? stringFormatter.format(\"resizerDescription\") : undefined;\n    let descriptionProps = (0, $d9Rqy$useDescription)(description);\n    let ariaProps = {\n        \"aria-label\": ariaLabel,\n        \"aria-orientation\": \"horizontal\",\n        \"aria-labelledby\": `${id} ${(0, $2140fb2337097f2d$export$37cd4213f2ad742e)(state.tableState, item.key)}`,\n        \"aria-valuetext\": stringFormatter.format(\"columnSize\", {\n            value: value\n        }),\n        \"type\": \"range\",\n        min: min,\n        max: max,\n        value: value,\n        ...descriptionProps\n    };\n    const focusInput = (0, $d9Rqy$useCallback)(()=>{\n        if (ref.current) (0, $d9Rqy$focusSafely)(ref.current);\n    }, [\n        ref\n    ]);\n    let resizingColumn = state.resizingColumn;\n    let prevResizingColumn = (0, $d9Rqy$useRef)(null);\n    (0, $d9Rqy$useEffect)(()=>{\n        if (prevResizingColumn.current !== resizingColumn && resizingColumn != null && resizingColumn === item.key) {\n            wasFocusedOnResizeStart.current = document.activeElement === ref.current;\n            startResize(item);\n            // Delay focusing input until Android Chrome's delayed click after touchend happens: https://bugs.chromium.org/p/chromium/issues/detail?id=1150073\n            let timeout = setTimeout(()=>focusInput(), 0);\n            // VoiceOver on iOS has problems focusing the input from a menu.\n            let VOTimeout = setTimeout(focusInput, 400);\n            return ()=>{\n                clearTimeout(timeout);\n                clearTimeout(VOTimeout);\n            };\n        }\n        prevResizingColumn.current = resizingColumn;\n    }, [\n        resizingColumn,\n        item,\n        focusInput,\n        ref,\n        startResize\n    ]);\n    let onChange = (e)=>{\n        let currentWidth = state.getColumnWidth(item.key);\n        let nextValue = parseFloat(e.target.value);\n        if (nextValue > currentWidth) nextValue = currentWidth + 10;\n        else nextValue = currentWidth - 10;\n        resize(item, nextValue);\n    };\n    let { pressProps: pressProps } = (0, $d9Rqy$usePress)({\n        onPressStart: (e)=>{\n            if (e.ctrlKey || e.altKey || e.metaKey || e.shiftKey || e.pointerType === \"keyboard\") return;\n            if (e.pointerType === \"virtual\" && state.resizingColumn != null) {\n                endResize(item);\n                return;\n            }\n            // Sometimes onPress won't trigger for quick taps on mobile so we want to focus the input so blurring away\n            // can cancel resize mode for us.\n            focusInput();\n            // If resizer is always visible, mobile screenreader user can access the visually hidden resizer directly and thus we don't need\n            // to handle a virtual click to start the resizer.\n            if (e.pointerType !== \"virtual\") startResize(item);\n        },\n        onPress: (e)=>{\n            if ((e.pointerType === \"touch\" && wasFocusedOnResizeStart.current || e.pointerType === \"mouse\") && state.resizingColumn != null) endResize(item);\n        }\n    });\n    let { visuallyHiddenProps: visuallyHiddenProps } = (0, $d9Rqy$useVisuallyHidden)();\n    return {\n        resizerProps: (0, $d9Rqy$mergeProps)(keyboardProps, {\n            ...moveProps,\n            onKeyDown: onKeyDown\n        }, pressProps, {\n            style: {\n                touchAction: \"none\"\n            }\n        }),\n        inputProps: (0, $d9Rqy$mergeProps)(visuallyHiddenProps, {\n            id: id,\n            onBlur: ()=>{\n                endResize(item);\n            },\n            onChange: onChange,\n            disabled: isDisabled\n        }, ariaProps),\n        isResizing: isResizing\n    };\n}\n\n\nexport {$e91ef4e5004e3774$export$52994e973806c219 as useTableColumnResize};\n//# sourceMappingURL=useTableColumnResize.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}