{"ast":null,"code":"import { TableCollection as $788781baa30117fa$export$596e1b2e2cf93690 } from \"./TableCollection.mjs\";\nimport { useTableState as $4a0dd036d492cee4$export$907bcc6c48325fd6 } from \"./useTableState.mjs\";\nimport { CollectionBuilder as $2Mvwf$CollectionBuilder } from \"@react-stately/collections\";\nimport { useMemo as $2Mvwf$useMemo } from \"react\";\nimport { tableNestedRows as $2Mvwf$tableNestedRows } from \"@react-stately/flags\";\nimport { useControlledState as $2Mvwf$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ee65a0057fd99531$export$34dfa8a1622185a4(props) {\n  let {\n    selectionMode = \"none\",\n    showSelectionCheckboxes: showSelectionCheckboxes,\n    showDragButtons: showDragButtons,\n    UNSTABLE_expandedKeys: propExpandedKeys,\n    UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys,\n    UNSTABLE_onExpandedChange: UNSTABLE_onExpandedChange,\n    children: children\n  } = props;\n  if (!(0, $2Mvwf$tableNestedRows)()) throw new Error(\"Feature flag for table nested rows must be enabled to use useTreeGridState.\");\n  let [expandedKeys, setExpandedKeys] = (0, $2Mvwf$useControlledState)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : undefined, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : new Set(), UNSTABLE_onExpandedChange);\n  let context = (0, $2Mvwf$useMemo)(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n    showDragButtons: showDragButtons,\n    selectionMode: selectionMode,\n    columns: []\n  }), [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  let builder = (0, $2Mvwf$useMemo)(() => new (0, $2Mvwf$CollectionBuilder)(), []);\n  let nodes = (0, $2Mvwf$useMemo)(() => builder.build({\n    children: children\n  }, context), [builder, children, context]);\n  let treeGridCollection = (0, $2Mvwf$useMemo)(() => {\n    return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {\n      showSelectionCheckboxes: showSelectionCheckboxes,\n      showDragButtons: showDragButtons,\n      expandedKeys: expandedKeys\n    });\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n  let onToggle = key => {\n    setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));\n  };\n  let collection = (0, $2Mvwf$useMemo)(() => {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n  let tableState = (0, $4a0dd036d492cee4$export$907bcc6c48325fd6)({\n    ...props,\n    collection: collection\n  });\n  return {\n    ...tableState,\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys: expandedKeys,\n    toggleKey: onToggle\n  };\n}\nfunction $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {\n  let updatedExpandedKeys;\n  if (currentExpandedKeys === \"all\") {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(row => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map(row => row.key));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) updatedExpandedKeys.delete(key);else updatedExpandedKeys.add(key);\n  }\n  return updatedExpandedKeys;\n}\nfunction $ee65a0057fd99531$var$convertExpanded(expanded) {\n  if (!expanded) return new Set();\n  return expanded === \"all\" ? \"all\" : new Set(expanded);\n}\nfunction $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {\n  let {\n    expandedKeys = new Set()\n  } = opts;\n  let body;\n  let flattenedRows = [];\n  let columnCount = 0;\n  let userColumnCount = 0;\n  let originalColumns = [];\n  let keyMap = new Map();\n  if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) columnCount++;\n  if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) columnCount++;\n  let topLevelRows = [];\n  let visit = node => {\n    switch (node.type) {\n      case \"body\":\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case \"column\":\n        if (!node.hasChildNodes) userColumnCount++;\n        break;\n      case \"item\":\n        topLevelRows.push(node);\n        return;\n    }\n    for (let child of node.childNodes) visit(child);\n  };\n  for (let node of nodes) {\n    if (node.type === \"column\") originalColumns.push(node);\n    visit(node);\n  }\n  columnCount += userColumnCount;\n  // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n  let globalRowCount = 0;\n  let visitNode = (node, i) => {\n    // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n    // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n    // values automatically calculated via CollectionBuilder\n    if (node.type === \"item\") {\n      let childNodes = [];\n      for (let child of node.childNodes) if (child.type === \"cell\") {\n        let cellClone = {\n          ...child\n        };\n        if (cellClone.index + 1 === columnCount) cellClone.nextKey = null;\n        childNodes.push({\n          ...cellClone\n        });\n      }\n      let clone = {\n        ...node,\n        childNodes: childNodes,\n        parentKey: body.key,\n        level: 1,\n        index: globalRowCount++\n      };\n      flattenedRows.push(clone);\n    }\n    let newProps = {};\n    // Assign indexOfType to cells and rows for aria-posinset\n    if (node.type !== \"placeholder\" && node.type !== \"column\") newProps[\"indexOfType\"] = i;\n    // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n    // via .childNodes returns the same object as the one found via keyMap look up\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n    let lastNode;\n    let rowIndex = 0;\n    for (let child of node.childNodes) if (!(child.type === \"item\" && expandedKeys !== \"all\" && !expandedKeys.has(node.key))) {\n      if (child.parentKey == null)\n        // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n        child.parentKey = node.key;\n      if (lastNode) {\n        lastNode.nextKey = child.key;\n        child.prevKey = lastNode.key;\n      } else child.prevKey = null;\n      if (child.type === \"item\") visitNode(child, rowIndex++);else\n        // We enforce that the cells come before rows so can just reuse cell index\n        visitNode(child, child.index);\n      lastNode = child;\n    }\n    if (lastNode) lastNode.nextKey = null;\n  };\n  let last;\n  topLevelRows.forEach((node, i) => {\n    visitNode(node, i);\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else node.prevKey = null;\n    last = node;\n  });\n  if (last) last.nextKey = null;\n  return {\n    keyMap: keyMap,\n    userColumnCount: userColumnCount,\n    flattenedRows: flattenedRows,\n    tableNodes: [...originalColumns, {\n      ...body,\n      childNodes: flattenedRows\n    }]\n  };\n}\nexport { $ee65a0057fd99531$export$34dfa8a1622185a4 as UNSTABLE_useTreeGridState };","map":{"version":3,"names":["TableCollection","$788781baa30117fa$export$596e1b2e2cf93690","useTableState","$4a0dd036d492cee4$export$907bcc6c48325fd6","CollectionBuilder","$2Mvwf$CollectionBuilder","useMemo","$2Mvwf$useMemo","tableNestedRows","$2Mvwf$tableNestedRows","useControlledState","$2Mvwf$useControlledState","$ee65a0057fd99531$export$34dfa8a1622185a4","props","selectionMode","showSelectionCheckboxes","showDragButtons","UNSTABLE_expandedKeys","propExpandedKeys","UNSTABLE_defaultExpandedKeys","propDefaultExpandedKeys","UNSTABLE_onExpandedChange","children","Error","expandedKeys","setExpandedKeys","$ee65a0057fd99531$var$convertExpanded","undefined","Set","context","columns","builder","nodes","build","treeGridCollection","$ee65a0057fd99531$var$generateTreeGridCollection","onToggle","key","$ee65a0057fd99531$var$toggleKey","collection","tableNodes","tableState","keyMap","userColumnCount","toggleKey","currentExpandedKeys","updatedExpandedKeys","flattenedRows","filter","row","UNSTABLE_childItems","length","map","delete","has","add","expanded","opts","body","columnCount","originalColumns","Map","topLevelRows","visit","node","type","set","hasChildNodes","push","child","childNodes","globalRowCount","visitNode","i","cellClone","index","nextKey","clone","parentKey","level","newProps","Object","assign","lastNode","rowIndex","prevKey","last","forEach","UNSTABLE_useTreeGridState"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-stately/table/dist/useTreeGridState.mjs"],"sourcesContent":["import {TableCollection as $788781baa30117fa$export$596e1b2e2cf93690} from \"./TableCollection.mjs\";\nimport {useTableState as $4a0dd036d492cee4$export$907bcc6c48325fd6} from \"./useTableState.mjs\";\nimport {CollectionBuilder as $2Mvwf$CollectionBuilder} from \"@react-stately/collections\";\nimport {useMemo as $2Mvwf$useMemo} from \"react\";\nimport {tableNestedRows as $2Mvwf$tableNestedRows} from \"@react-stately/flags\";\nimport {useControlledState as $2Mvwf$useControlledState} from \"@react-stately/utils\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\n\nfunction $ee65a0057fd99531$export$34dfa8a1622185a4(props) {\n    let { selectionMode: selectionMode = \"none\", showSelectionCheckboxes: showSelectionCheckboxes, showDragButtons: showDragButtons, UNSTABLE_expandedKeys: propExpandedKeys, UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys, UNSTABLE_onExpandedChange: UNSTABLE_onExpandedChange, children: children } = props;\n    if (!(0, $2Mvwf$tableNestedRows)()) throw new Error(\"Feature flag for table nested rows must be enabled to use useTreeGridState.\");\n    let [expandedKeys, setExpandedKeys] = (0, $2Mvwf$useControlledState)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : undefined, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : new Set(), UNSTABLE_onExpandedChange);\n    let context = (0, $2Mvwf$useMemo)(()=>({\n            showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n            showDragButtons: showDragButtons,\n            selectionMode: selectionMode,\n            columns: []\n        }), [\n        children,\n        showSelectionCheckboxes,\n        selectionMode,\n        showDragButtons\n    ]);\n    let builder = (0, $2Mvwf$useMemo)(()=>new (0, $2Mvwf$CollectionBuilder)(), []);\n    let nodes = (0, $2Mvwf$useMemo)(()=>builder.build({\n            children: children\n        }, context), [\n        builder,\n        children,\n        context\n    ]);\n    let treeGridCollection = (0, $2Mvwf$useMemo)(()=>{\n        return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {\n            showSelectionCheckboxes: showSelectionCheckboxes,\n            showDragButtons: showDragButtons,\n            expandedKeys: expandedKeys\n        });\n    }, [\n        nodes,\n        showSelectionCheckboxes,\n        showDragButtons,\n        expandedKeys\n    ]);\n    let onToggle = (key)=>{\n        setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));\n    };\n    let collection = (0, $2Mvwf$useMemo)(()=>{\n        return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);\n    }, [\n        context,\n        treeGridCollection.tableNodes\n    ]);\n    let tableState = (0, $4a0dd036d492cee4$export$907bcc6c48325fd6)({\n        ...props,\n        collection: collection\n    });\n    return {\n        ...tableState,\n        keyMap: treeGridCollection.keyMap,\n        userColumnCount: treeGridCollection.userColumnCount,\n        expandedKeys: expandedKeys,\n        toggleKey: onToggle\n    };\n}\nfunction $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {\n    let updatedExpandedKeys;\n    if (currentExpandedKeys === \"all\") {\n        updatedExpandedKeys = new Set(collection.flattenedRows.filter((row)=>row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map((row)=>row.key));\n        updatedExpandedKeys.delete(key);\n    } else {\n        updatedExpandedKeys = new Set(currentExpandedKeys);\n        if (updatedExpandedKeys.has(key)) updatedExpandedKeys.delete(key);\n        else updatedExpandedKeys.add(key);\n    }\n    return updatedExpandedKeys;\n}\nfunction $ee65a0057fd99531$var$convertExpanded(expanded) {\n    if (!expanded) return new Set();\n    return expanded === \"all\" ? \"all\" : new Set(expanded);\n}\nfunction $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {\n    let { expandedKeys: expandedKeys = new Set() } = opts;\n    let body;\n    let flattenedRows = [];\n    let columnCount = 0;\n    let userColumnCount = 0;\n    let originalColumns = [];\n    let keyMap = new Map();\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) columnCount++;\n    if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) columnCount++;\n    let topLevelRows = [];\n    let visit = (node)=>{\n        switch(node.type){\n            case \"body\":\n                body = node;\n                keyMap.set(body.key, body);\n                break;\n            case \"column\":\n                if (!node.hasChildNodes) userColumnCount++;\n                break;\n            case \"item\":\n                topLevelRows.push(node);\n                return;\n        }\n        for (let child of node.childNodes)visit(child);\n    };\n    for (let node of nodes){\n        if (node.type === \"column\") originalColumns.push(node);\n        visit(node);\n    }\n    columnCount += userColumnCount;\n    // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n    let globalRowCount = 0;\n    let visitNode = (node, i)=>{\n        // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n        // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n        // values automatically calculated via CollectionBuilder\n        if (node.type === \"item\") {\n            let childNodes = [];\n            for (let child of node.childNodes)if (child.type === \"cell\") {\n                let cellClone = {\n                    ...child\n                };\n                if (cellClone.index + 1 === columnCount) cellClone.nextKey = null;\n                childNodes.push({\n                    ...cellClone\n                });\n            }\n            let clone = {\n                ...node,\n                childNodes: childNodes,\n                parentKey: body.key,\n                level: 1,\n                index: globalRowCount++\n            };\n            flattenedRows.push(clone);\n        }\n        let newProps = {};\n        // Assign indexOfType to cells and rows for aria-posinset\n        if (node.type !== \"placeholder\" && node.type !== \"column\") newProps[\"indexOfType\"] = i;\n        // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n        // via .childNodes returns the same object as the one found via keyMap look up\n        Object.assign(node, newProps);\n        keyMap.set(node.key, node);\n        let lastNode;\n        let rowIndex = 0;\n        for (let child of node.childNodes)if (!(child.type === \"item\" && expandedKeys !== \"all\" && !expandedKeys.has(node.key))) {\n            if (child.parentKey == null) // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n            child.parentKey = node.key;\n            if (lastNode) {\n                lastNode.nextKey = child.key;\n                child.prevKey = lastNode.key;\n            } else child.prevKey = null;\n            if (child.type === \"item\") visitNode(child, rowIndex++);\n            else // We enforce that the cells come before rows so can just reuse cell index\n            visitNode(child, child.index);\n            lastNode = child;\n        }\n        if (lastNode) lastNode.nextKey = null;\n    };\n    let last;\n    topLevelRows.forEach((node, i)=>{\n        visitNode(node, i);\n        if (last) {\n            last.nextKey = node.key;\n            node.prevKey = last.key;\n        } else node.prevKey = null;\n        last = node;\n    });\n    if (last) last.nextKey = null;\n    return {\n        keyMap: keyMap,\n        userColumnCount: userColumnCount,\n        flattenedRows: flattenedRows,\n        tableNodes: [\n            ...originalColumns,\n            {\n                ...body,\n                childNodes: flattenedRows\n            }\n        ]\n    };\n}\n\n\nexport {$ee65a0057fd99531$export$34dfa8a1622185a4 as UNSTABLE_useTreeGridState};\n//# sourceMappingURL=useTreeGridState.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}