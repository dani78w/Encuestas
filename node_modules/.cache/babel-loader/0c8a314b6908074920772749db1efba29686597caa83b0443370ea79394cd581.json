{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */class $d6fd23bc337660df$export$64839e615120df17 {\n  getStringForLocale(key, locale) {\n    let strings = this.messages[locale];\n    if (!strings) {\n      strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n      this.messages[locale] = strings;\n    }\n    let string = strings[key];\n    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n    return string;\n  }\n  constructor(messages, defaultLocale = \"en-US\") {\n    // Clone messages so we don't modify the original object.\n    // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n    this.messages = Object.fromEntries(Object.entries(messages).filter(([, v]) => v));\n    this.defaultLocale = defaultLocale;\n  }\n}\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n  // If there is an exact match, use it.\n  if (strings[locale]) return strings[locale];\n  // Attempt to find the closest match by language.\n  // For example, if the locale is fr-CA (French Canadian), but there is only\n  // an fr-FR (France) set of strings, use that.\n  // This could be replaced with Intl.LocaleMatcher once it is supported.\n  // https://github.com/tc39/proposal-intl-localematcher\n  let language = $d6fd23bc337660df$var$getLanguage(locale);\n  if (strings[language]) return strings[language];\n  for (let key in strings) {\n    if (key.startsWith(language + \"-\")) return strings[key];\n  }\n  // Nothing close, use english.\n  return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n  // @ts-ignore\n  if (Intl.Locale)\n    // @ts-ignore\n    return new Intl.Locale(locale).language;\n  return locale.split(\"-\")[0];\n}\nexport { $d6fd23bc337660df$export$64839e615120df17 as MessageDictionary };","map":{"version":3,"names":["$d6fd23bc337660df$export$64839e615120df17","getStringForLocale","key","locale","strings","messages","$d6fd23bc337660df$var$getStringsForLocale","defaultLocale","string","Error","constructor","Object","fromEntries","entries","filter","v","language","$d6fd23bc337660df$var$getLanguage","startsWith","Intl","Locale","split","MessageDictionary"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@internationalized/message/dist/MessageDictionary.mjs"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ class $d6fd23bc337660df$export$64839e615120df17 {\n    getStringForLocale(key, locale) {\n        let strings = this.messages[locale];\n        if (!strings) {\n            strings = $d6fd23bc337660df$var$getStringsForLocale(locale, this.messages, this.defaultLocale);\n            this.messages[locale] = strings;\n        }\n        let string = strings[key];\n        if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);\n        return string;\n    }\n    constructor(messages, defaultLocale = \"en-US\"){\n        // Clone messages so we don't modify the original object.\n        // Filter out entries with falsy values which may have been caused by applying optimize-locales-plugin.\n        this.messages = Object.fromEntries(Object.entries(messages).filter(([, v])=>v));\n        this.defaultLocale = defaultLocale;\n    }\n}\nfunction $d6fd23bc337660df$var$getStringsForLocale(locale, strings, defaultLocale = \"en-US\") {\n    // If there is an exact match, use it.\n    if (strings[locale]) return strings[locale];\n    // Attempt to find the closest match by language.\n    // For example, if the locale is fr-CA (French Canadian), but there is only\n    // an fr-FR (France) set of strings, use that.\n    // This could be replaced with Intl.LocaleMatcher once it is supported.\n    // https://github.com/tc39/proposal-intl-localematcher\n    let language = $d6fd23bc337660df$var$getLanguage(locale);\n    if (strings[language]) return strings[language];\n    for(let key in strings){\n        if (key.startsWith(language + \"-\")) return strings[key];\n    }\n    // Nothing close, use english.\n    return strings[defaultLocale];\n}\nfunction $d6fd23bc337660df$var$getLanguage(locale) {\n    // @ts-ignore\n    if (Intl.Locale) // @ts-ignore\n    return new Intl.Locale(locale).language;\n    return locale.split(\"-\")[0];\n}\n\n\nexport {$d6fd23bc337660df$export$64839e615120df17 as MessageDictionary};\n//# sourceMappingURL=MessageDictionary.mjs.map\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAI,MAAMA,yCAAyC,CAAC;EAChDC,kBAAkBA,CAACC,GAAG,EAAEC,MAAM,EAAE;IAC5B,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ,CAACF,MAAM,CAAC;IACnC,IAAI,CAACC,OAAO,EAAE;MACVA,OAAO,GAAGE,yCAAyC,CAACH,MAAM,EAAE,IAAI,CAACE,QAAQ,EAAE,IAAI,CAACE,aAAa,CAAC;MAC9F,IAAI,CAACF,QAAQ,CAACF,MAAM,CAAC,GAAGC,OAAO;IACnC;IACA,IAAII,MAAM,GAAGJ,OAAO,CAACF,GAAG,CAAC;IACzB,IAAI,CAACM,MAAM,EAAE,MAAM,IAAIC,KAAK,CAAE,+BAA8BP,GAAI,OAAMC,MAAO,SAAQ,CAAC;IACtF,OAAOK,MAAM;EACjB;EACAE,WAAWA,CAACL,QAAQ,EAAEE,aAAa,GAAG,OAAO,EAAC;IAC1C;IACA;IACA,IAAI,CAACF,QAAQ,GAAGM,MAAM,CAACC,WAAW,CAACD,MAAM,CAACE,OAAO,CAACR,QAAQ,CAAC,CAACS,MAAM,CAAC,CAAC,GAAGC,CAAC,CAAC,KAAGA,CAAC,CAAC,CAAC;IAC/E,IAAI,CAACR,aAAa,GAAGA,aAAa;EACtC;AACJ;AACA,SAASD,yCAAyCA,CAACH,MAAM,EAAEC,OAAO,EAAEG,aAAa,GAAG,OAAO,EAAE;EACzF;EACA,IAAIH,OAAO,CAACD,MAAM,CAAC,EAAE,OAAOC,OAAO,CAACD,MAAM,CAAC;EAC3C;EACA;EACA;EACA;EACA;EACA,IAAIa,QAAQ,GAAGC,iCAAiC,CAACd,MAAM,CAAC;EACxD,IAAIC,OAAO,CAACY,QAAQ,CAAC,EAAE,OAAOZ,OAAO,CAACY,QAAQ,CAAC;EAC/C,KAAI,IAAId,GAAG,IAAIE,OAAO,EAAC;IACnB,IAAIF,GAAG,CAACgB,UAAU,CAACF,QAAQ,GAAG,GAAG,CAAC,EAAE,OAAOZ,OAAO,CAACF,GAAG,CAAC;EAC3D;EACA;EACA,OAAOE,OAAO,CAACG,aAAa,CAAC;AACjC;AACA,SAASU,iCAAiCA,CAACd,MAAM,EAAE;EAC/C;EACA,IAAIgB,IAAI,CAACC,MAAM;IAAE;IACjB,OAAO,IAAID,IAAI,CAACC,MAAM,CAACjB,MAAM,CAAC,CAACa,QAAQ;EACvC,OAAOb,MAAM,CAACkB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/B;AAGA,SAAQrB,yCAAyC,IAAIsB,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}