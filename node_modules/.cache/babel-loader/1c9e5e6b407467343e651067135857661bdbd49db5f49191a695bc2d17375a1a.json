{"ast":null,"code":"import { isCtrlKeyPressed as $feb5ffebff200149$export$16792effe837dba3, isNonContiguousSelectionModifier as $feb5ffebff200149$export$d3e3bd3e26688c04 } from \"./utils.mjs\";\nimport { focusSafely as $581M0$focusSafely } from \"@react-aria/focus\";\nimport { useRouter as $581M0$useRouter, openLink as $581M0$openLink, mergeProps as $581M0$mergeProps } from \"@react-aria/utils\";\nimport { usePress as $581M0$usePress, useLongPress as $581M0$useLongPress } from \"@react-aria/interactions\";\nimport { useEffect as $581M0$useEffect, useRef as $581M0$useRef } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n  let {\n    selectionManager: manager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    focus: focus,\n    isDisabled: isDisabled,\n    onAction: onAction,\n    allowsDifferentPressOrigin: allowsDifferentPressOrigin,\n    linkBehavior = \"action\"\n  } = options;\n  let router = (0, $581M0$useRouter)();\n  let onSelect = e => {\n    if (e.pointerType === \"keyboard\" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);else {\n      if (manager.selectionMode === \"none\") return;\n      if (manager.isLink(key)) {\n        if (linkBehavior === \"selection\") {\n          let itemProps = manager.getItemProps(key);\n          router.open(ref.current, e, itemProps.href, itemProps.routerOptions);\n          // Always set selected keys back to what they were so that select and combobox close.\n          manager.setSelectedKeys(manager.selectedKeys);\n          return;\n        } else if (linkBehavior === \"override\" || linkBehavior === \"none\") return;\n      }\n      if (manager.selectionMode === \"single\") {\n        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);\n      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === \"toggle\" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === \"touch\" || e.pointerType === \"virtual\"))\n        // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        manager.toggleSelection(key);else manager.replaceSelection(key);\n    }\n  };\n  // Focus the associated DOM node when this item becomes the focusedKey\n  (0, $581M0$useEffect)(() => {\n    let isFocused = key === manager.focusedKey;\n    if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n      if (focus) focus();else if (document.activeElement !== ref.current) (0, $581M0$focusSafely)(ref.current);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref, key, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]);\n  isDisabled = isDisabled || manager.isDisabled(key);\n  // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n  // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n  let itemProps = {};\n  if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n    tabIndex: key === manager.focusedKey ? 0 : -1,\n    onFocus(e) {\n      if (e.target === ref.current) manager.setFocusedKey(key);\n    }\n  };else if (isDisabled) itemProps.onMouseDown = e => {\n    // Prevent focus going to the body when clicking on a disabled item.\n    e.preventDefault();\n  };\n  // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n  // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n  // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n  // With touch, onAction occurs on single tap, and long press enters selection mode.\n  let isLinkOverride = manager.isLink(key) && linkBehavior === \"override\";\n  let hasLinkAction = manager.isLink(key) && linkBehavior !== \"selection\" && linkBehavior !== \"none\";\n  let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;\n  let allowsActions = (onAction || hasLinkAction) && !isDisabled;\n  let hasPrimaryAction = allowsActions && (manager.selectionBehavior === \"replace\" ? !allowsSelection : !allowsSelection || manager.isEmpty);\n  let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === \"replace\";\n  let hasAction = hasPrimaryAction || hasSecondaryAction;\n  let modality = (0, $581M0$useRef)(null);\n  let longPressEnabled = hasAction && allowsSelection;\n  let longPressEnabledOnPressStart = (0, $581M0$useRef)(false);\n  let hadPrimaryActionOnPressStart = (0, $581M0$useRef)(false);\n  let performAction = e => {\n    if (onAction) onAction();\n    if (hasLinkAction) {\n      let itemProps = manager.getItemProps(key);\n      router.open(ref.current, e, itemProps.href, itemProps.routerOptions);\n    }\n  };\n  // By default, selection occurs on pointer down. This can be strange if selecting an\n  // item causes the UI to disappear immediately (e.g. menus).\n  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n  // onPress requires a pointer down event on the same element as pointer up. For menus,\n  // we want to be able to have the pointer down on the trigger that opens the menu and\n  // the pointer up on the menu item rather than requiring a separate press.\n  // For keyboard events, selection still occurs on key down.\n  let itemPressProps = {};\n  if (shouldSelectOnPressUp) {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      if (e.pointerType === \"keyboard\" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n    };\n    // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n    if (!allowsDifferentPressOrigin) itemPressProps.onPress = e => {\n      if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== \"mouse\") {\n        if (e.pointerType === \"keyboard\" && !$880e95eb8b93ba9a$var$isActionKey()) return;\n        performAction(e);\n      } else if (e.pointerType !== \"keyboard\" && allowsSelection) onSelect(e);\n    };else {\n      itemPressProps.onPressUp = hasPrimaryAction ? null : e => {\n        if (e.pointerType !== \"keyboard\" && allowsSelection) onSelect(e);\n      };\n      itemPressProps.onPress = hasPrimaryAction ? performAction : null;\n    }\n  } else {\n    itemPressProps.onPressStart = e => {\n      modality.current = e.pointerType;\n      longPressEnabledOnPressStart.current = longPressEnabled;\n      hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n      // Select on mouse down unless there is a primary action which will occur on mouse up.\n      // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n      // and the Enter key performs onAction on key up.\n      if (allowsSelection && (e.pointerType === \"mouse\" && !hasPrimaryAction || e.pointerType === \"keyboard\" && (!allowsActions || $880e95eb8b93ba9a$var$isSelectionKey()))) onSelect(e);\n    };\n    itemPressProps.onPress = e => {\n      // Selection occurs on touch up. Primary actions always occur on pointer up.\n      // Both primary and secondary actions occur on Enter key up. The only exception\n      // is secondary actions, which occur on double click with a mouse.\n      if (e.pointerType === \"touch\" || e.pointerType === \"pen\" || e.pointerType === \"virtual\" || e.pointerType === \"keyboard\" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === \"mouse\" && hadPrimaryActionOnPressStart.current) {\n        if (hasAction) performAction(e);else if (allowsSelection) onSelect(e);\n      }\n    };\n  }\n  itemProps[\"data-key\"] = key;\n  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $581M0$usePress)(itemPressProps);\n  // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n  let onDoubleClick = hasSecondaryAction ? e => {\n    if (modality.current === \"mouse\") {\n      e.stopPropagation();\n      e.preventDefault();\n      performAction(e);\n    }\n  } : undefined;\n  // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n  let {\n    longPressProps: longPressProps\n  } = (0, $581M0$useLongPress)({\n    isDisabled: !longPressEnabled,\n    onLongPress(e) {\n      if (e.pointerType === \"touch\") {\n        onSelect(e);\n        manager.setSelectionBehavior(\"toggle\");\n      }\n    }\n  });\n  // Prevent native drag and drop on long press if we also select on long press.\n  // Once the user is in selection mode, they can long press again to drag.\n  // Use a capturing listener to ensure this runs before useDrag, regardless of\n  // the order the props get merged.\n  let onDragStartCapture = e => {\n    if (modality.current === \"touch\" && longPressEnabledOnPressStart.current) e.preventDefault();\n  };\n  // Prevent default on link clicks so that we control exactly\n  // when they open (to match selection behavior).\n  let onClick = manager.isLink(key) ? e => {\n    if (!(0, $581M0$openLink).isOpening) e.preventDefault();\n  } : undefined;\n  return {\n    itemProps: (0, $581M0$mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n      onDoubleClick: onDoubleClick,\n      onDragStartCapture: onDragStartCapture,\n      onClick: onClick\n    }),\n    isPressed: isPressed,\n    isSelected: manager.isSelected(key),\n    isFocused: manager.isFocused && manager.focusedKey === key,\n    isDisabled: isDisabled,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \"Enter\";\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n  let event = window.event;\n  return (event === null || event === void 0 ? void 0 : event.key) === \" \" || (event === null || event === void 0 ? void 0 : event.code) === \"Space\";\n}\nexport { $880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem };","map":{"version":3,"names":["isCtrlKeyPressed","$feb5ffebff200149$export$16792effe837dba3","isNonContiguousSelectionModifier","$feb5ffebff200149$export$d3e3bd3e26688c04","focusSafely","$581M0$focusSafely","useRouter","$581M0$useRouter","openLink","$581M0$openLink","mergeProps","$581M0$mergeProps","usePress","$581M0$usePress","useLongPress","$581M0$useLongPress","useEffect","$581M0$useEffect","useRef","$581M0$useRef","$880e95eb8b93ba9a$export$ecf600387e221c37","options","selectionManager","manager","key","ref","shouldSelectOnPressUp","shouldUseVirtualFocus","focus","isDisabled","onAction","allowsDifferentPressOrigin","linkBehavior","router","onSelect","e","pointerType","toggleSelection","selectionMode","isLink","itemProps","getItemProps","open","current","href","routerOptions","setSelectedKeys","selectedKeys","isSelected","disallowEmptySelection","replaceSelection","shiftKey","extendSelection","selectionBehavior","isFocused","focusedKey","document","activeElement","childFocusStrategy","tabIndex","onFocus","target","setFocusedKey","onMouseDown","preventDefault","isLinkOverride","hasLinkAction","allowsSelection","canSelectItem","allowsActions","hasPrimaryAction","isEmpty","hasSecondaryAction","hasAction","modality","longPressEnabled","longPressEnabledOnPressStart","hadPrimaryActionOnPressStart","performAction","itemPressProps","onPressStart","$880e95eb8b93ba9a$var$isSelectionKey","onPress","$880e95eb8b93ba9a$var$isActionKey","onPressUp","preventFocusOnPress","pressProps","isPressed","onDoubleClick","stopPropagation","undefined","longPressProps","onLongPress","setSelectionBehavior","onDragStartCapture","onClick","isOpening","event","window","code","useSelectableItem"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-aria/selection/dist/useSelectableItem.mjs"],"sourcesContent":["import {isCtrlKeyPressed as $feb5ffebff200149$export$16792effe837dba3, isNonContiguousSelectionModifier as $feb5ffebff200149$export$d3e3bd3e26688c04} from \"./utils.mjs\";\nimport {focusSafely as $581M0$focusSafely} from \"@react-aria/focus\";\nimport {useRouter as $581M0$useRouter, openLink as $581M0$openLink, mergeProps as $581M0$mergeProps} from \"@react-aria/utils\";\nimport {usePress as $581M0$usePress, useLongPress as $581M0$useLongPress} from \"@react-aria/interactions\";\nimport {useEffect as $581M0$useEffect, useRef as $581M0$useRef} from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\nfunction $880e95eb8b93ba9a$export$ecf600387e221c37(options) {\n    let { selectionManager: manager, key: key, ref: ref, shouldSelectOnPressUp: shouldSelectOnPressUp, shouldUseVirtualFocus: shouldUseVirtualFocus, focus: focus, isDisabled: isDisabled, onAction: onAction, allowsDifferentPressOrigin: allowsDifferentPressOrigin, linkBehavior: linkBehavior = \"action\" } = options;\n    let router = (0, $581M0$useRouter)();\n    let onSelect = (e)=>{\n        if (e.pointerType === \"keyboard\" && (0, $feb5ffebff200149$export$d3e3bd3e26688c04)(e)) manager.toggleSelection(key);\n        else {\n            if (manager.selectionMode === \"none\") return;\n            if (manager.isLink(key)) {\n                if (linkBehavior === \"selection\") {\n                    let itemProps = manager.getItemProps(key);\n                    router.open(ref.current, e, itemProps.href, itemProps.routerOptions);\n                    // Always set selected keys back to what they were so that select and combobox close.\n                    manager.setSelectedKeys(manager.selectedKeys);\n                    return;\n                } else if (linkBehavior === \"override\" || linkBehavior === \"none\") return;\n            }\n            if (manager.selectionMode === \"single\") {\n                if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);\n                else manager.replaceSelection(key);\n            } else if (e && e.shiftKey) manager.extendSelection(key);\n            else if (manager.selectionBehavior === \"toggle\" || e && ((0, $feb5ffebff200149$export$16792effe837dba3)(e) || e.pointerType === \"touch\" || e.pointerType === \"virtual\")) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n            manager.toggleSelection(key);\n            else manager.replaceSelection(key);\n        }\n    };\n    // Focus the associated DOM node when this item becomes the focusedKey\n    (0, $581M0$useEffect)(()=>{\n        let isFocused = key === manager.focusedKey;\n        if (isFocused && manager.isFocused && !shouldUseVirtualFocus) {\n            if (focus) focus();\n            else if (document.activeElement !== ref.current) (0, $581M0$focusSafely)(ref.current);\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        ref,\n        key,\n        manager.focusedKey,\n        manager.childFocusStrategy,\n        manager.isFocused,\n        shouldUseVirtualFocus\n    ]);\n    isDisabled = isDisabled || manager.isDisabled(key);\n    // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused\n    // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver\n    // on iOS 14 doesn't try to move real DOM focus to the item anyway.\n    let itemProps = {};\n    if (!shouldUseVirtualFocus && !isDisabled) itemProps = {\n        tabIndex: key === manager.focusedKey ? 0 : -1,\n        onFocus (e) {\n            if (e.target === ref.current) manager.setFocusedKey(key);\n        }\n    };\n    else if (isDisabled) itemProps.onMouseDown = (e)=>{\n        // Prevent focus going to the body when clicking on a disabled item.\n        e.preventDefault();\n    };\n    // With checkbox selection, onAction (i.e. navigation) becomes primary, and occurs on a single click of the row.\n    // Clicking the checkbox enters selection mode, after which clicking anywhere on any row toggles selection for that row.\n    // With highlight selection, onAction is secondary, and occurs on double click. Single click selects the row.\n    // With touch, onAction occurs on single tap, and long press enters selection mode.\n    let isLinkOverride = manager.isLink(key) && linkBehavior === \"override\";\n    let hasLinkAction = manager.isLink(key) && linkBehavior !== \"selection\" && linkBehavior !== \"none\";\n    let allowsSelection = !isDisabled && manager.canSelectItem(key) && !isLinkOverride;\n    let allowsActions = (onAction || hasLinkAction) && !isDisabled;\n    let hasPrimaryAction = allowsActions && (manager.selectionBehavior === \"replace\" ? !allowsSelection : !allowsSelection || manager.isEmpty);\n    let hasSecondaryAction = allowsActions && allowsSelection && manager.selectionBehavior === \"replace\";\n    let hasAction = hasPrimaryAction || hasSecondaryAction;\n    let modality = (0, $581M0$useRef)(null);\n    let longPressEnabled = hasAction && allowsSelection;\n    let longPressEnabledOnPressStart = (0, $581M0$useRef)(false);\n    let hadPrimaryActionOnPressStart = (0, $581M0$useRef)(false);\n    let performAction = (e)=>{\n        if (onAction) onAction();\n        if (hasLinkAction) {\n            let itemProps = manager.getItemProps(key);\n            router.open(ref.current, e, itemProps.href, itemProps.routerOptions);\n        }\n    };\n    // By default, selection occurs on pointer down. This can be strange if selecting an\n    // item causes the UI to disappear immediately (e.g. menus).\n    // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.\n    // onPress requires a pointer down event on the same element as pointer up. For menus,\n    // we want to be able to have the pointer down on the trigger that opens the menu and\n    // the pointer up on the menu item rather than requiring a separate press.\n    // For keyboard events, selection still occurs on key down.\n    let itemPressProps = {};\n    if (shouldSelectOnPressUp) {\n        itemPressProps.onPressStart = (e)=>{\n            modality.current = e.pointerType;\n            longPressEnabledOnPressStart.current = longPressEnabled;\n            if (e.pointerType === \"keyboard\" && (!hasAction || $880e95eb8b93ba9a$var$isSelectionKey())) onSelect(e);\n        };\n        // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)\n        // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)\n        if (!allowsDifferentPressOrigin) itemPressProps.onPress = (e)=>{\n            if (hasPrimaryAction || hasSecondaryAction && e.pointerType !== \"mouse\") {\n                if (e.pointerType === \"keyboard\" && !$880e95eb8b93ba9a$var$isActionKey()) return;\n                performAction(e);\n            } else if (e.pointerType !== \"keyboard\" && allowsSelection) onSelect(e);\n        };\n        else {\n            itemPressProps.onPressUp = hasPrimaryAction ? null : (e)=>{\n                if (e.pointerType !== \"keyboard\" && allowsSelection) onSelect(e);\n            };\n            itemPressProps.onPress = hasPrimaryAction ? performAction : null;\n        }\n    } else {\n        itemPressProps.onPressStart = (e)=>{\n            modality.current = e.pointerType;\n            longPressEnabledOnPressStart.current = longPressEnabled;\n            hadPrimaryActionOnPressStart.current = hasPrimaryAction;\n            // Select on mouse down unless there is a primary action which will occur on mouse up.\n            // For keyboard, select on key down. If there is an action, the Space key selects on key down,\n            // and the Enter key performs onAction on key up.\n            if (allowsSelection && (e.pointerType === \"mouse\" && !hasPrimaryAction || e.pointerType === \"keyboard\" && (!allowsActions || $880e95eb8b93ba9a$var$isSelectionKey()))) onSelect(e);\n        };\n        itemPressProps.onPress = (e)=>{\n            // Selection occurs on touch up. Primary actions always occur on pointer up.\n            // Both primary and secondary actions occur on Enter key up. The only exception\n            // is secondary actions, which occur on double click with a mouse.\n            if (e.pointerType === \"touch\" || e.pointerType === \"pen\" || e.pointerType === \"virtual\" || e.pointerType === \"keyboard\" && hasAction && $880e95eb8b93ba9a$var$isActionKey() || e.pointerType === \"mouse\" && hadPrimaryActionOnPressStart.current) {\n                if (hasAction) performAction(e);\n                else if (allowsSelection) onSelect(e);\n            }\n        };\n    }\n    itemProps[\"data-key\"] = key;\n    itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;\n    let { pressProps: pressProps, isPressed: isPressed } = (0, $581M0$usePress)(itemPressProps);\n    // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.\n    let onDoubleClick = hasSecondaryAction ? (e)=>{\n        if (modality.current === \"mouse\") {\n            e.stopPropagation();\n            e.preventDefault();\n            performAction(e);\n        }\n    } : undefined;\n    // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior\n    // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to\n    // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.\n    let { longPressProps: longPressProps } = (0, $581M0$useLongPress)({\n        isDisabled: !longPressEnabled,\n        onLongPress (e) {\n            if (e.pointerType === \"touch\") {\n                onSelect(e);\n                manager.setSelectionBehavior(\"toggle\");\n            }\n        }\n    });\n    // Prevent native drag and drop on long press if we also select on long press.\n    // Once the user is in selection mode, they can long press again to drag.\n    // Use a capturing listener to ensure this runs before useDrag, regardless of\n    // the order the props get merged.\n    let onDragStartCapture = (e)=>{\n        if (modality.current === \"touch\" && longPressEnabledOnPressStart.current) e.preventDefault();\n    };\n    // Prevent default on link clicks so that we control exactly\n    // when they open (to match selection behavior).\n    let onClick = manager.isLink(key) ? (e)=>{\n        if (!(0, $581M0$openLink).isOpening) e.preventDefault();\n    } : undefined;\n    return {\n        itemProps: (0, $581M0$mergeProps)(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, longPressEnabled ? longPressProps : {}, {\n            onDoubleClick: onDoubleClick,\n            onDragStartCapture: onDragStartCapture,\n            onClick: onClick\n        }),\n        isPressed: isPressed,\n        isSelected: manager.isSelected(key),\n        isFocused: manager.isFocused && manager.focusedKey === key,\n        isDisabled: isDisabled,\n        allowsSelection: allowsSelection,\n        hasAction: hasAction\n    };\n}\nfunction $880e95eb8b93ba9a$var$isActionKey() {\n    let event = window.event;\n    return (event === null || event === void 0 ? void 0 : event.key) === \"Enter\";\n}\nfunction $880e95eb8b93ba9a$var$isSelectionKey() {\n    let event = window.event;\n    return (event === null || event === void 0 ? void 0 : event.key) === \" \" || (event === null || event === void 0 ? void 0 : event.code) === \"Space\";\n}\n\n\nexport {$880e95eb8b93ba9a$export$ecf600387e221c37 as useSelectableItem};\n//# sourceMappingURL=useSelectableItem.mjs.map\n"],"mappings":"AAAA,SAAQA,gBAAgB,IAAIC,yCAAyC,EAAEC,gCAAgC,IAAIC,yCAAyC,QAAO,aAAa;AACxK,SAAQC,WAAW,IAAIC,kBAAkB,QAAO,mBAAmB;AACnE,SAAQC,SAAS,IAAIC,gBAAgB,EAAEC,QAAQ,IAAIC,eAAe,EAAEC,UAAU,IAAIC,iBAAiB,QAAO,mBAAmB;AAC7H,SAAQC,QAAQ,IAAIC,eAAe,EAAEC,YAAY,IAAIC,mBAAmB,QAAO,0BAA0B;AACzG,SAAQC,SAAS,IAAIC,gBAAgB,EAAEC,MAAM,IAAIC,aAAa,QAAO,OAAO;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,SAASC,yCAAyCA,CAACC,OAAO,EAAE;EACxD,IAAI;IAAEC,gBAAgB,EAAEC,OAAO;IAAEC,GAAG,EAAEA,GAAG;IAAEC,GAAG,EAAEA,GAAG;IAAEC,qBAAqB,EAAEA,qBAAqB;IAAEC,qBAAqB,EAAEA,qBAAqB;IAAEC,KAAK,EAAEA,KAAK;IAAEC,UAAU,EAAEA,UAAU;IAAEC,QAAQ,EAAEA,QAAQ;IAAEC,0BAA0B,EAAEA,0BAA0B;IAAgBC,YAAY,GAAG;EAAS,CAAC,GAAGX,OAAO;EACpT,IAAIY,MAAM,GAAG,CAAC,CAAC,EAAE1B,gBAAgB,EAAE,CAAC;EACpC,IAAI2B,QAAQ,GAAIC,CAAC,IAAG;IAChB,IAAIA,CAAC,CAACC,WAAW,KAAK,UAAU,IAAI,CAAC,CAAC,EAAEjC,yCAAyC,EAAEgC,CAAC,CAAC,EAAEZ,OAAO,CAACc,eAAe,CAACb,GAAG,CAAC,CAAC,KAC/G;MACD,IAAID,OAAO,CAACe,aAAa,KAAK,MAAM,EAAE;MACtC,IAAIf,OAAO,CAACgB,MAAM,CAACf,GAAG,CAAC,EAAE;QACrB,IAAIQ,YAAY,KAAK,WAAW,EAAE;UAC9B,IAAIQ,SAAS,GAAGjB,OAAO,CAACkB,YAAY,CAACjB,GAAG,CAAC;UACzCS,MAAM,CAACS,IAAI,CAACjB,GAAG,CAACkB,OAAO,EAAER,CAAC,EAAEK,SAAS,CAACI,IAAI,EAAEJ,SAAS,CAACK,aAAa,CAAC;UACpE;UACAtB,OAAO,CAACuB,eAAe,CAACvB,OAAO,CAACwB,YAAY,CAAC;UAC7C;QACJ,CAAC,MAAM,IAAIf,YAAY,KAAK,UAAU,IAAIA,YAAY,KAAK,MAAM,EAAE;MACvE;MACA,IAAIT,OAAO,CAACe,aAAa,KAAK,QAAQ,EAAE;QACpC,IAAIf,OAAO,CAACyB,UAAU,CAACxB,GAAG,CAAC,IAAI,CAACD,OAAO,CAAC0B,sBAAsB,EAAE1B,OAAO,CAACc,eAAe,CAACb,GAAG,CAAC,CAAC,KACxFD,OAAO,CAAC2B,gBAAgB,CAAC1B,GAAG,CAAC;MACtC,CAAC,MAAM,IAAIW,CAAC,IAAIA,CAAC,CAACgB,QAAQ,EAAE5B,OAAO,CAAC6B,eAAe,CAAC5B,GAAG,CAAC,CAAC,KACpD,IAAID,OAAO,CAAC8B,iBAAiB,KAAK,QAAQ,IAAIlB,CAAC,KAAK,CAAC,CAAC,EAAElC,yCAAyC,EAAEkC,CAAC,CAAC,IAAIA,CAAC,CAACC,WAAW,KAAK,OAAO,IAAID,CAAC,CAACC,WAAW,KAAK,SAAS,CAAC;QAAE;QACzKb,OAAO,CAACc,eAAe,CAACb,GAAG,CAAC,CAAC,KACxBD,OAAO,CAAC2B,gBAAgB,CAAC1B,GAAG,CAAC;IACtC;EACJ,CAAC;EACD;EACA,CAAC,CAAC,EAAEP,gBAAgB,EAAE,MAAI;IACtB,IAAIqC,SAAS,GAAG9B,GAAG,KAAKD,OAAO,CAACgC,UAAU;IAC1C,IAAID,SAAS,IAAI/B,OAAO,CAAC+B,SAAS,IAAI,CAAC3B,qBAAqB,EAAE;MAC1D,IAAIC,KAAK,EAAEA,KAAK,CAAC,CAAC,CAAC,KACd,IAAI4B,QAAQ,CAACC,aAAa,KAAKhC,GAAG,CAACkB,OAAO,EAAE,CAAC,CAAC,EAAEtC,kBAAkB,EAAEoB,GAAG,CAACkB,OAAO,CAAC;IACzF;IACJ;EACA,CAAC,EAAE,CACClB,GAAG,EACHD,GAAG,EACHD,OAAO,CAACgC,UAAU,EAClBhC,OAAO,CAACmC,kBAAkB,EAC1BnC,OAAO,CAAC+B,SAAS,EACjB3B,qBAAqB,CACxB,CAAC;EACFE,UAAU,GAAGA,UAAU,IAAIN,OAAO,CAACM,UAAU,CAACL,GAAG,CAAC;EAClD;EACA;EACA;EACA,IAAIgB,SAAS,GAAG,CAAC,CAAC;EAClB,IAAI,CAACb,qBAAqB,IAAI,CAACE,UAAU,EAAEW,SAAS,GAAG;IACnDmB,QAAQ,EAAEnC,GAAG,KAAKD,OAAO,CAACgC,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7CK,OAAOA,CAAEzB,CAAC,EAAE;MACR,IAAIA,CAAC,CAAC0B,MAAM,KAAKpC,GAAG,CAACkB,OAAO,EAAEpB,OAAO,CAACuC,aAAa,CAACtC,GAAG,CAAC;IAC5D;EACJ,CAAC,CAAC,KACG,IAAIK,UAAU,EAAEW,SAAS,CAACuB,WAAW,GAAI5B,CAAC,IAAG;IAC9C;IACAA,CAAC,CAAC6B,cAAc,CAAC,CAAC;EACtB,CAAC;EACD;EACA;EACA;EACA;EACA,IAAIC,cAAc,GAAG1C,OAAO,CAACgB,MAAM,CAACf,GAAG,CAAC,IAAIQ,YAAY,KAAK,UAAU;EACvE,IAAIkC,aAAa,GAAG3C,OAAO,CAACgB,MAAM,CAACf,GAAG,CAAC,IAAIQ,YAAY,KAAK,WAAW,IAAIA,YAAY,KAAK,MAAM;EAClG,IAAImC,eAAe,GAAG,CAACtC,UAAU,IAAIN,OAAO,CAAC6C,aAAa,CAAC5C,GAAG,CAAC,IAAI,CAACyC,cAAc;EAClF,IAAII,aAAa,GAAG,CAACvC,QAAQ,IAAIoC,aAAa,KAAK,CAACrC,UAAU;EAC9D,IAAIyC,gBAAgB,GAAGD,aAAa,KAAK9C,OAAO,CAAC8B,iBAAiB,KAAK,SAAS,GAAG,CAACc,eAAe,GAAG,CAACA,eAAe,IAAI5C,OAAO,CAACgD,OAAO,CAAC;EAC1I,IAAIC,kBAAkB,GAAGH,aAAa,IAAIF,eAAe,IAAI5C,OAAO,CAAC8B,iBAAiB,KAAK,SAAS;EACpG,IAAIoB,SAAS,GAAGH,gBAAgB,IAAIE,kBAAkB;EACtD,IAAIE,QAAQ,GAAG,CAAC,CAAC,EAAEvD,aAAa,EAAE,IAAI,CAAC;EACvC,IAAIwD,gBAAgB,GAAGF,SAAS,IAAIN,eAAe;EACnD,IAAIS,4BAA4B,GAAG,CAAC,CAAC,EAAEzD,aAAa,EAAE,KAAK,CAAC;EAC5D,IAAI0D,4BAA4B,GAAG,CAAC,CAAC,EAAE1D,aAAa,EAAE,KAAK,CAAC;EAC5D,IAAI2D,aAAa,GAAI3C,CAAC,IAAG;IACrB,IAAIL,QAAQ,EAAEA,QAAQ,CAAC,CAAC;IACxB,IAAIoC,aAAa,EAAE;MACf,IAAI1B,SAAS,GAAGjB,OAAO,CAACkB,YAAY,CAACjB,GAAG,CAAC;MACzCS,MAAM,CAACS,IAAI,CAACjB,GAAG,CAACkB,OAAO,EAAER,CAAC,EAAEK,SAAS,CAACI,IAAI,EAAEJ,SAAS,CAACK,aAAa,CAAC;IACxE;EACJ,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIkC,cAAc,GAAG,CAAC,CAAC;EACvB,IAAIrD,qBAAqB,EAAE;IACvBqD,cAAc,CAACC,YAAY,GAAI7C,CAAC,IAAG;MAC/BuC,QAAQ,CAAC/B,OAAO,GAAGR,CAAC,CAACC,WAAW;MAChCwC,4BAA4B,CAACjC,OAAO,GAAGgC,gBAAgB;MACvD,IAAIxC,CAAC,CAACC,WAAW,KAAK,UAAU,KAAK,CAACqC,SAAS,IAAIQ,oCAAoC,CAAC,CAAC,CAAC,EAAE/C,QAAQ,CAACC,CAAC,CAAC;IAC3G,CAAC;IACD;IACA;IACA,IAAI,CAACJ,0BAA0B,EAAEgD,cAAc,CAACG,OAAO,GAAI/C,CAAC,IAAG;MAC3D,IAAImC,gBAAgB,IAAIE,kBAAkB,IAAIrC,CAAC,CAACC,WAAW,KAAK,OAAO,EAAE;QACrE,IAAID,CAAC,CAACC,WAAW,KAAK,UAAU,IAAI,CAAC+C,iCAAiC,CAAC,CAAC,EAAE;QAC1EL,aAAa,CAAC3C,CAAC,CAAC;MACpB,CAAC,MAAM,IAAIA,CAAC,CAACC,WAAW,KAAK,UAAU,IAAI+B,eAAe,EAAEjC,QAAQ,CAACC,CAAC,CAAC;IAC3E,CAAC,CAAC,KACG;MACD4C,cAAc,CAACK,SAAS,GAAGd,gBAAgB,GAAG,IAAI,GAAInC,CAAC,IAAG;QACtD,IAAIA,CAAC,CAACC,WAAW,KAAK,UAAU,IAAI+B,eAAe,EAAEjC,QAAQ,CAACC,CAAC,CAAC;MACpE,CAAC;MACD4C,cAAc,CAACG,OAAO,GAAGZ,gBAAgB,GAAGQ,aAAa,GAAG,IAAI;IACpE;EACJ,CAAC,MAAM;IACHC,cAAc,CAACC,YAAY,GAAI7C,CAAC,IAAG;MAC/BuC,QAAQ,CAAC/B,OAAO,GAAGR,CAAC,CAACC,WAAW;MAChCwC,4BAA4B,CAACjC,OAAO,GAAGgC,gBAAgB;MACvDE,4BAA4B,CAAClC,OAAO,GAAG2B,gBAAgB;MACvD;MACA;MACA;MACA,IAAIH,eAAe,KAAKhC,CAAC,CAACC,WAAW,KAAK,OAAO,IAAI,CAACkC,gBAAgB,IAAInC,CAAC,CAACC,WAAW,KAAK,UAAU,KAAK,CAACiC,aAAa,IAAIY,oCAAoC,CAAC,CAAC,CAAC,CAAC,EAAE/C,QAAQ,CAACC,CAAC,CAAC;IACtL,CAAC;IACD4C,cAAc,CAACG,OAAO,GAAI/C,CAAC,IAAG;MAC1B;MACA;MACA;MACA,IAAIA,CAAC,CAACC,WAAW,KAAK,OAAO,IAAID,CAAC,CAACC,WAAW,KAAK,KAAK,IAAID,CAAC,CAACC,WAAW,KAAK,SAAS,IAAID,CAAC,CAACC,WAAW,KAAK,UAAU,IAAIqC,SAAS,IAAIU,iCAAiC,CAAC,CAAC,IAAIhD,CAAC,CAACC,WAAW,KAAK,OAAO,IAAIyC,4BAA4B,CAAClC,OAAO,EAAE;QAC9O,IAAI8B,SAAS,EAAEK,aAAa,CAAC3C,CAAC,CAAC,CAAC,KAC3B,IAAIgC,eAAe,EAAEjC,QAAQ,CAACC,CAAC,CAAC;MACzC;IACJ,CAAC;EACL;EACAK,SAAS,CAAC,UAAU,CAAC,GAAGhB,GAAG;EAC3BuD,cAAc,CAACM,mBAAmB,GAAG1D,qBAAqB;EAC1D,IAAI;IAAE2D,UAAU,EAAEA,UAAU;IAAEC,SAAS,EAAEA;EAAU,CAAC,GAAG,CAAC,CAAC,EAAE1E,eAAe,EAAEkE,cAAc,CAAC;EAC3F;EACA,IAAIS,aAAa,GAAGhB,kBAAkB,GAAIrC,CAAC,IAAG;IAC1C,IAAIuC,QAAQ,CAAC/B,OAAO,KAAK,OAAO,EAAE;MAC9BR,CAAC,CAACsD,eAAe,CAAC,CAAC;MACnBtD,CAAC,CAAC6B,cAAc,CAAC,CAAC;MAClBc,aAAa,CAAC3C,CAAC,CAAC;IACpB;EACJ,CAAC,GAAGuD,SAAS;EACb;EACA;EACA;EACA,IAAI;IAAEC,cAAc,EAAEA;EAAe,CAAC,GAAG,CAAC,CAAC,EAAE5E,mBAAmB,EAAE;IAC9Dc,UAAU,EAAE,CAAC8C,gBAAgB;IAC7BiB,WAAWA,CAAEzD,CAAC,EAAE;MACZ,IAAIA,CAAC,CAACC,WAAW,KAAK,OAAO,EAAE;QAC3BF,QAAQ,CAACC,CAAC,CAAC;QACXZ,OAAO,CAACsE,oBAAoB,CAAC,QAAQ,CAAC;MAC1C;IACJ;EACJ,CAAC,CAAC;EACF;EACA;EACA;EACA;EACA,IAAIC,kBAAkB,GAAI3D,CAAC,IAAG;IAC1B,IAAIuC,QAAQ,CAAC/B,OAAO,KAAK,OAAO,IAAIiC,4BAA4B,CAACjC,OAAO,EAAER,CAAC,CAAC6B,cAAc,CAAC,CAAC;EAChG,CAAC;EACD;EACA;EACA,IAAI+B,OAAO,GAAGxE,OAAO,CAACgB,MAAM,CAACf,GAAG,CAAC,GAAIW,CAAC,IAAG;IACrC,IAAI,CAAC,CAAC,CAAC,EAAE1B,eAAe,EAAEuF,SAAS,EAAE7D,CAAC,CAAC6B,cAAc,CAAC,CAAC;EAC3D,CAAC,GAAG0B,SAAS;EACb,OAAO;IACHlD,SAAS,EAAE,CAAC,CAAC,EAAE7B,iBAAiB,EAAE6B,SAAS,EAAE2B,eAAe,IAAIG,gBAAgB,GAAGgB,UAAU,GAAG,CAAC,CAAC,EAAEX,gBAAgB,GAAGgB,cAAc,GAAG,CAAC,CAAC,EAAE;MACxIH,aAAa,EAAEA,aAAa;MAC5BM,kBAAkB,EAAEA,kBAAkB;MACtCC,OAAO,EAAEA;IACb,CAAC,CAAC;IACFR,SAAS,EAAEA,SAAS;IACpBvC,UAAU,EAAEzB,OAAO,CAACyB,UAAU,CAACxB,GAAG,CAAC;IACnC8B,SAAS,EAAE/B,OAAO,CAAC+B,SAAS,IAAI/B,OAAO,CAACgC,UAAU,KAAK/B,GAAG;IAC1DK,UAAU,EAAEA,UAAU;IACtBsC,eAAe,EAAEA,eAAe;IAChCM,SAAS,EAAEA;EACf,CAAC;AACL;AACA,SAASU,iCAAiCA,CAAA,EAAG;EACzC,IAAIc,KAAK,GAAGC,MAAM,CAACD,KAAK;EACxB,OAAO,CAACA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACzE,GAAG,MAAM,OAAO;AAChF;AACA,SAASyD,oCAAoCA,CAAA,EAAG;EAC5C,IAAIgB,KAAK,GAAGC,MAAM,CAACD,KAAK;EACxB,OAAO,CAACA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACzE,GAAG,MAAM,GAAG,IAAI,CAACyE,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACE,IAAI,MAAM,OAAO;AACtJ;AAGA,SAAQ/E,yCAAyC,IAAIgF,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}