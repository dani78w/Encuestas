{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/src/components/ListaEncuestas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ListaEncuestas() {\n  _s();\n  const [encuestas, setEncuestas] = useState([]);\n  useEffect(() => {\n    // Función para obtener las encuestas\n    const obtenerEncuestas = async () => {\n      try {\n        // Realizar solicitud GET a la API para obtener las encuestas\n        const response = await fetch('http://188.127.169.12:8000/encuestas/');\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status}`);\n        }\n        // Convertir la respuesta a JSON\n        const data = await response.json();\n        // Actualizar el estado con las encuestas obtenidas\n        setEncuestas(data);\n      } catch (error) {\n        console.error('Error al obtener las encuestas:', error);\n      }\n    };\n\n    // Llamar a la función para obtener las encuestas al cargar el componente\n    obtenerEncuestas();\n  }, []); // La dependencia vacía asegura que solo se ejecute una vez al montar el componente\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid grid-cols-1 gap-4 lg:grid-cols-4 lg:gap-8\",\n    children: encuestas.map(encuesta => /*#__PURE__*/_jsxDEV(Card, {\n      title: encuesta.titulo,\n      description: \"test\",\n      episodeNumber: encuesta.id,\n      timeLength: encuesta.id + 1,\n      guests: encuesta.dueno\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n}\n_s(ListaEncuestas, \"wT4844a0NL8oqevk7hq4QOnyjzE=\");\n_c = ListaEncuestas;\nexport default ListaEncuestas;\nvar _c;\n$RefreshReg$(_c, \"ListaEncuestas\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","ListaEncuestas","_s","encuestas","setEncuestas","obtenerEncuestas","response","fetch","ok","Error","status","data","json","error","console","className","children","map","encuesta","title","titulo","description","episodeNumber","id","timeLength","guests","dueno","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/src/components/ListaEncuestas.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\n\nfunction ListaEncuestas() {\n    const [encuestas, setEncuestas] = useState([]);\n\n    useEffect(() => {\n        // Función para obtener las encuestas\n        const obtenerEncuestas = async () => {\n            try {\n                // Realizar solicitud GET a la API para obtener las encuestas\n                const response = await fetch('http://188.127.169.12:8000/encuestas/');\n                if (!response.ok) {\n                    throw new Error(`Error: ${response.status}`);\n                }\n                // Convertir la respuesta a JSON\n                const data = await response.json();\n                // Actualizar el estado con las encuestas obtenidas\n                setEncuestas(data);\n            } catch (error) {\n                console.error('Error al obtener las encuestas:', error);\n            }\n        };\n\n        // Llamar a la función para obtener las encuestas al cargar el componente\n        obtenerEncuestas();\n    }, []); // La dependencia vacía asegura que solo se ejecute una vez al montar el componente\n\n    return (\n\n\n\n            \n        <div className=\"grid grid-cols-1 gap-4 lg:grid-cols-4 lg:gap-8\">\n        \n                {encuestas.map((encuesta) => (\n\n                    <Card\n                        title={encuesta.titulo}\n                        description=\"test\"\n                        episodeNumber={encuesta.id}\n                        timeLength={encuesta.id + 1}\n                        guests={encuesta.dueno}\n                    />\n\n                ))}\n            </div>\n    \n    );\n}\n\nexport default ListaEncuestas;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMQ,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC;QACrE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAE,UAASH,QAAQ,CAACI,MAAO,EAAC,CAAC;QAChD;QACA;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClC;QACAR,YAAY,CAACO,IAAI,CAAC;MACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MAC3D;IACJ,CAAC;;IAED;IACAR,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAKIL,OAAA;IAAKe,SAAS,EAAC,gDAAgD;IAAAC,QAAA,EAEtDb,SAAS,CAACc,GAAG,CAAEC,QAAQ,iBAEpBlB,OAAA,CAACF,IAAI;MACDqB,KAAK,EAAED,QAAQ,CAACE,MAAO;MACvBC,WAAW,EAAC,MAAM;MAClBC,aAAa,EAAEJ,QAAQ,CAACK,EAAG;MAC3BC,UAAU,EAAEN,QAAQ,CAACK,EAAE,GAAG,CAAE;MAC5BE,MAAM,EAAEP,QAAQ,CAACQ;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAEJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAGlB;AAAC5B,EAAA,CA9CQD,cAAc;AAAA8B,EAAA,GAAd9B,cAAc;AAgDvB,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}