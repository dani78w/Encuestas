{"ast":null,"code":"import { Selection as $e40ea825a81a3709$export$52baac22726c72bf } from \"./Selection.mjs\";\nimport { compareNodeOrder as $jkhUT$compareNodeOrder, getFirstItem as $jkhUT$getFirstItem, getChildNodes as $jkhUT$getChildNodes } from \"@react-stately/collections\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n  setFocusedKey(key, childFocusStrategy) {\n    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n  get selectedKeys() {\n    return this.state.selectedKeys === \"all\" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n  isSelected(key) {\n    if (this.state.selectionMode === \"none\") return false;\n    key = this.getKey(key);\n    return this.state.selectedKeys === \"all\" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n  get isEmpty() {\n    return this.state.selectedKeys !== \"all\" && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === \"all\") return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n  get firstSelectedKey() {\n    let first = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, first) < 0) first = item;\n    }\n    return first === null || first === void 0 ? void 0 : first.key;\n  }\n  get lastSelectedKey() {\n    let last = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, last) > 0) last = item;\n    }\n    return last === null || last === void 0 ? void 0 : last.key;\n  }\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n  extendSelection(toKey) {\n    if (this.selectionMode === \"none\") return;\n    if (this.selectionMode === \"single\") {\n      this.replaceSelection(toKey);\n      return;\n    }\n    toKey = this.getKey(toKey);\n    let selection;\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === \"all\") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n      for (let key of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key)) selection.add(key);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if ((0, $jkhUT$compareNodeOrder)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n    return [];\n  }\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === \"item\" || item.type === \"cell\" && this.allowsCellSelection) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n    return [];\n  }\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item)\n      // ¯\\_(ツ)_/¯\n      return key;\n    // If cell selection is allowed, just return the key.\n    if (item.type === \"cell\" && this.allowsCellSelection) return key;\n    // Find a parent item to select\n    while (item.type !== \"item\" && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n    if (!item || item.type !== \"item\") return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n  toggleSelection(key) {\n    if (this.selectionMode === \"none\") return;\n    if (this.selectionMode === \"single\" && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n    key = this.getKey(key);\n    if (key == null) return;\n    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === \"all\" ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n  replaceSelection(key) {\n    if (this.selectionMode === \"none\") return;\n    key = this.getKey(key);\n    if (key == null) return;\n    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n  setSelectedKeys(keys) {\n    if (this.selectionMode === \"none\") return;\n    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === \"single\") break;\n      }\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getSelectAllKeys() {\n    let keys = [];\n    let addKeys = key => {\n      while (key) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === \"item\") keys.push(key);\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== \"item\")) addKeys((0, $jkhUT$getFirstItem)((0, $jkhUT$getChildNodes)(item, this.collection)).key);\n        }\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n  selectAll() {\n    if (!this.isSelectAll && this.selectionMode === \"multiple\") this.state.setSelectedKeys(\"all\");\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === \"all\" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n  select(key, e) {\n    if (this.selectionMode === \"none\") return;\n    if (this.selectionMode === \"single\") {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === \"toggle\" || e && (e.pointerType === \"touch\" || e.pointerType === \"virtual\"))\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true;\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) return false;\n    }\n    return true;\n  }\n  canSelectItem(key) {\n    var _item_props;\n    if (this.state.selectionMode === \"none\" || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === \"cell\" && !this.allowsCellSelection) return false;\n    return true;\n  }\n  isDisabled(key) {\n    var _this_collection_getItem_props, _this_collection_getItem;\n    return this.state.disabledBehavior === \"all\" && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));\n  }\n  isLink(key) {\n    var _this_collection_getItem_props, _this_collection_getItem;\n    return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);\n  }\n  getItemProps(key) {\n    var _this_collection_getItem;\n    return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;\n  }\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n    var _options_allowsCellSelection;\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n  }\n}\nexport { $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"names":["Selection","$e40ea825a81a3709$export$52baac22726c72bf","compareNodeOrder","$jkhUT$compareNodeOrder","getFirstItem","$jkhUT$getFirstItem","getChildNodes","$jkhUT$getChildNodes","$d496c0a20b6e58ec$export$6c8a5aaad13c9852","selectionMode","state","disallowEmptySelection","selectionBehavior","setSelectionBehavior","isFocused","setFocused","focusedKey","childFocusStrategy","setFocusedKey","key","collection","getItem","selectedKeys","Set","getSelectAllKeys","rawSelection","isSelected","getKey","canSelectItem","has","isEmpty","size","isSelectAll","_isSelectAll","allKeys","every","k","firstSelectedKey","first","item","lastSelectedKey","last","disabledKeys","disabledBehavior","extendSelection","toKey","replaceSelection","selection","anchorKey","getKeyRange","currentKey","delete","add","setSelectedKeys","from","to","fromItem","toItem","getKeyRangeInternal","keys","type","allowsCellSelection","push","getKeyAfter","parentKey","toggleSelection","addKeys","hasChildNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","_item_props","props","isDisabled","_this_collection_getItem_props","_this_collection_getItem","isLink","href","getItemProps","constructor","options","_options_allowsCellSelection","SelectionManager"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-stately/selection/dist/SelectionManager.mjs"],"sourcesContent":["import {Selection as $e40ea825a81a3709$export$52baac22726c72bf} from \"./Selection.mjs\";\nimport {compareNodeOrder as $jkhUT$compareNodeOrder, getFirstItem as $jkhUT$getFirstItem, getChildNodes as $jkhUT$getChildNodes} from \"@react-stately/collections\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n    /**\n   * The type of selection that is allowed in the collection.\n   */ get selectionMode() {\n        return this.state.selectionMode;\n    }\n    /**\n   * Whether the collection allows empty selection.\n   */ get disallowEmptySelection() {\n        return this.state.disallowEmptySelection;\n    }\n    /**\n   * The selection behavior for the collection.\n   */ get selectionBehavior() {\n        return this.state.selectionBehavior;\n    }\n    /**\n   * Sets the selection behavior for the collection.\n   */ setSelectionBehavior(selectionBehavior) {\n        this.state.setSelectionBehavior(selectionBehavior);\n    }\n    /**\n   * Whether the collection is currently focused.\n   */ get isFocused() {\n        return this.state.isFocused;\n    }\n    /**\n   * Sets whether the collection is focused.\n   */ setFocused(isFocused) {\n        this.state.setFocused(isFocused);\n    }\n    /**\n   * The current focused key in the collection.\n   */ get focusedKey() {\n        return this.state.focusedKey;\n    }\n    /** Whether the first or last child of the focused key should receive focus. */ get childFocusStrategy() {\n        return this.state.childFocusStrategy;\n    }\n    /**\n   * Sets the focused key.\n   */ setFocusedKey(key, childFocusStrategy) {\n        if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n    }\n    /**\n   * The currently selected keys in the collection.\n   */ get selectedKeys() {\n        return this.state.selectedKeys === \"all\" ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n    /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */ get rawSelection() {\n        return this.state.selectedKeys;\n    }\n    /**\n   * Returns whether a key is selected.\n   */ isSelected(key) {\n        if (this.state.selectionMode === \"none\") return false;\n        key = this.getKey(key);\n        return this.state.selectedKeys === \"all\" ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n    }\n    /**\n   * Whether the selection is empty.\n   */ get isEmpty() {\n        return this.state.selectedKeys !== \"all\" && this.state.selectedKeys.size === 0;\n    }\n    /**\n   * Whether all items in the collection are selected.\n   */ get isSelectAll() {\n        if (this.isEmpty) return false;\n        if (this.state.selectedKeys === \"all\") return true;\n        if (this._isSelectAll != null) return this._isSelectAll;\n        let allKeys = this.getSelectAllKeys();\n        let selectedKeys = this.state.selectedKeys;\n        this._isSelectAll = allKeys.every((k)=>selectedKeys.has(k));\n        return this._isSelectAll;\n    }\n    get firstSelectedKey() {\n        let first = null;\n        for (let key of this.state.selectedKeys){\n            let item = this.collection.getItem(key);\n            if (!first || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, first) < 0) first = item;\n        }\n        return first === null || first === void 0 ? void 0 : first.key;\n    }\n    get lastSelectedKey() {\n        let last = null;\n        for (let key of this.state.selectedKeys){\n            let item = this.collection.getItem(key);\n            if (!last || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, last) > 0) last = item;\n        }\n        return last === null || last === void 0 ? void 0 : last.key;\n    }\n    get disabledKeys() {\n        return this.state.disabledKeys;\n    }\n    get disabledBehavior() {\n        return this.state.disabledBehavior;\n    }\n    /**\n   * Extends the selection to the given key.\n   */ extendSelection(toKey) {\n        if (this.selectionMode === \"none\") return;\n        if (this.selectionMode === \"single\") {\n            this.replaceSelection(toKey);\n            return;\n        }\n        toKey = this.getKey(toKey);\n        let selection;\n        // Only select the one key if coming from a select all.\n        if (this.state.selectedKeys === \"all\") selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([\n            toKey\n        ], toKey, toKey);\n        else {\n            let selectedKeys = this.state.selectedKeys;\n            let anchorKey = selectedKeys.anchorKey || toKey;\n            selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n            for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey))selection.delete(key);\n            for (let key of this.getKeyRange(toKey, anchorKey))if (this.canSelectItem(key)) selection.add(key);\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    getKeyRange(from, to) {\n        let fromItem = this.collection.getItem(from);\n        let toItem = this.collection.getItem(to);\n        if (fromItem && toItem) {\n            if ((0, $jkhUT$compareNodeOrder)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);\n            return this.getKeyRangeInternal(to, from);\n        }\n        return [];\n    }\n    getKeyRangeInternal(from, to) {\n        let keys = [];\n        let key = from;\n        while(key){\n            let item = this.collection.getItem(key);\n            if (item && item.type === \"item\" || item.type === \"cell\" && this.allowsCellSelection) keys.push(key);\n            if (key === to) return keys;\n            key = this.collection.getKeyAfter(key);\n        }\n        return [];\n    }\n    getKey(key) {\n        let item = this.collection.getItem(key);\n        if (!item) // ¯\\_(ツ)_/¯\n        return key;\n        // If cell selection is allowed, just return the key.\n        if (item.type === \"cell\" && this.allowsCellSelection) return key;\n        // Find a parent item to select\n        while(item.type !== \"item\" && item.parentKey != null)item = this.collection.getItem(item.parentKey);\n        if (!item || item.type !== \"item\") return null;\n        return item.key;\n    }\n    /**\n   * Toggles whether the given key is selected.\n   */ toggleSelection(key) {\n        if (this.selectionMode === \"none\") return;\n        if (this.selectionMode === \"single\" && !this.isSelected(key)) {\n            this.replaceSelection(key);\n            return;\n        }\n        key = this.getKey(key);\n        if (key == null) return;\n        let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === \"all\" ? this.getSelectAllKeys() : this.state.selectedKeys);\n        if (keys.has(key)) keys.delete(key);\n        else if (this.canSelectItem(key)) {\n            keys.add(key);\n            keys.anchorKey = key;\n            keys.currentKey = key;\n        }\n        if (this.disallowEmptySelection && keys.size === 0) return;\n        this.state.setSelectedKeys(keys);\n    }\n    /**\n   * Replaces the selection with only the given key.\n   */ replaceSelection(key) {\n        if (this.selectionMode === \"none\") return;\n        key = this.getKey(key);\n        if (key == null) return;\n        let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([\n            key\n        ], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n        this.state.setSelectedKeys(selection);\n    }\n    /**\n   * Replaces the selection with the given keys.\n   */ setSelectedKeys(keys) {\n        if (this.selectionMode === \"none\") return;\n        let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n        for (let key of keys){\n            key = this.getKey(key);\n            if (key != null) {\n                selection.add(key);\n                if (this.selectionMode === \"single\") break;\n            }\n        }\n        this.state.setSelectedKeys(selection);\n    }\n    getSelectAllKeys() {\n        let keys = [];\n        let addKeys = (key)=>{\n            while(key){\n                if (this.canSelectItem(key)) {\n                    let item = this.collection.getItem(key);\n                    if (item.type === \"item\") keys.push(key);\n                    // Add child keys. If cell selection is allowed, then include item children too.\n                    if (item.hasChildNodes && (this.allowsCellSelection || item.type !== \"item\")) addKeys((0, $jkhUT$getFirstItem)((0, $jkhUT$getChildNodes)(item, this.collection)).key);\n                }\n                key = this.collection.getKeyAfter(key);\n            }\n        };\n        addKeys(this.collection.getFirstKey());\n        return keys;\n    }\n    /**\n   * Selects all items in the collection.\n   */ selectAll() {\n        if (!this.isSelectAll && this.selectionMode === \"multiple\") this.state.setSelectedKeys(\"all\");\n    }\n    /**\n   * Removes all keys from the selection.\n   */ clearSelection() {\n        if (!this.disallowEmptySelection && (this.state.selectedKeys === \"all\" || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n    }\n    /**\n   * Toggles between select all and an empty selection.\n   */ toggleSelectAll() {\n        if (this.isSelectAll) this.clearSelection();\n        else this.selectAll();\n    }\n    select(key, e) {\n        if (this.selectionMode === \"none\") return;\n        if (this.selectionMode === \"single\") {\n            if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);\n            else this.replaceSelection(key);\n        } else if (this.selectionBehavior === \"toggle\" || e && (e.pointerType === \"touch\" || e.pointerType === \"virtual\")) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n        this.toggleSelection(key);\n        else this.replaceSelection(key);\n    }\n    /**\n   * Returns whether the current selection is equal to the given selection.\n   */ isSelectionEqual(selection) {\n        if (selection === this.state.selectedKeys) return true;\n        // Check if the set of keys match.\n        let selectedKeys = this.selectedKeys;\n        if (selection.size !== selectedKeys.size) return false;\n        for (let key of selection){\n            if (!selectedKeys.has(key)) return false;\n        }\n        for (let key of selectedKeys){\n            if (!selection.has(key)) return false;\n        }\n        return true;\n    }\n    canSelectItem(key) {\n        var _item_props;\n        if (this.state.selectionMode === \"none\" || this.state.disabledKeys.has(key)) return false;\n        let item = this.collection.getItem(key);\n        if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === \"cell\" && !this.allowsCellSelection) return false;\n        return true;\n    }\n    isDisabled(key) {\n        var _this_collection_getItem_props, _this_collection_getItem;\n        return this.state.disabledBehavior === \"all\" && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));\n    }\n    isLink(key) {\n        var _this_collection_getItem_props, _this_collection_getItem;\n        return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);\n    }\n    getItemProps(key) {\n        var _this_collection_getItem;\n        return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;\n    }\n    constructor(collection, state, options){\n        this.collection = collection;\n        this.state = state;\n        var _options_allowsCellSelection;\n        this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n        this._isSelectAll = null;\n    }\n}\n\n\nexport {$d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager};\n//# sourceMappingURL=SelectionManager.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}