{"ast":null,"code":"import $7GIZw$react from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  let {\n    children: children,\n    textValue: textValue,\n    UNSTABLE_childItems: UNSTABLE_childItems\n  } = props;\n  yield {\n    type: \"item\",\n    props: props,\n    textValue: textValue,\n    \"aria-label\": props[\"aria-label\"],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showDragButtons) yield {\n        type: \"cell\",\n        key: \"header-drag\",\n        props: {\n          isDragButtonCell: true\n        }\n      };\n      if (context.showSelectionCheckboxes && context.selectionMode !== \"none\") yield {\n        type: \"cell\",\n        key: \"header\",\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === \"function\") {\n        for (let column of context.columns) yield {\n          type: \"cell\",\n          element: children(column.key),\n          key: column.key // this is combined with the row key by CollectionBuilder\n        };\n        if (UNSTABLE_childItems) for (let child of UNSTABLE_childItems)\n        // Note: in order to reuse the render function of TableBody for our child rows, we just need to yield a type and a value here. CollectionBuilder will then look up\n        // the parent renderer and use that to build the full node of this child row, using the value provided here to generate the cells\n        yield {\n          type: \"item\",\n          value: child\n        };\n      } else {\n        let cells = [];\n        let childRows = [];\n        (0, $7GIZw$react).Children.forEach(children, node => {\n          if (node.type === $70d70eb16ea48428$var$Row) {\n            if (cells.length < context.columns.length) throw new Error(\"All of a Row's child Cells must be positioned before any child Rows.\");\n            childRows.push({\n              type: \"item\",\n              element: node\n            });\n          } else cells.push({\n            type: \"cell\",\n            element: node\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate(newContext) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nexport { $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row };","map":{"version":3,"names":["$7GIZw$react","$70d70eb16ea48428$var$Row","props","getCollectionNode","context","children","textValue","UNSTABLE_childItems","type","hasChildNodes","childNodes","showDragButtons","key","isDragButtonCell","showSelectionCheckboxes","selectionMode","isSelectionCell","column","columns","element","child","value","cells","childRows","Children","forEach","node","length","Error","push","shouldInvalidate","newContext","some","c","i","$70d70eb16ea48428$export$b59bdbef9ce70de2","Row"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-stately/table/dist/Row.mjs"],"sourcesContent":["import $7GIZw$react from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \nfunction $70d70eb16ea48428$var$Row(props) {\n    return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n    let { children: children, textValue: textValue, UNSTABLE_childItems: UNSTABLE_childItems } = props;\n    yield {\n        type: \"item\",\n        props: props,\n        textValue: textValue,\n        \"aria-label\": props[\"aria-label\"],\n        hasChildNodes: true,\n        *childNodes () {\n            // Process cells first\n            if (context.showDragButtons) yield {\n                type: \"cell\",\n                key: \"header-drag\",\n                props: {\n                    isDragButtonCell: true\n                }\n            };\n            if (context.showSelectionCheckboxes && context.selectionMode !== \"none\") yield {\n                type: \"cell\",\n                key: \"header\",\n                props: {\n                    isSelectionCell: true\n                }\n            };\n            if (typeof children === \"function\") {\n                for (let column of context.columns)yield {\n                    type: \"cell\",\n                    element: children(column.key),\n                    key: column.key // this is combined with the row key by CollectionBuilder\n                };\n                if (UNSTABLE_childItems) for (let child of UNSTABLE_childItems)// Note: in order to reuse the render function of TableBody for our child rows, we just need to yield a type and a value here. CollectionBuilder will then look up\n                // the parent renderer and use that to build the full node of this child row, using the value provided here to generate the cells\n                yield {\n                    type: \"item\",\n                    value: child\n                };\n            } else {\n                let cells = [];\n                let childRows = [];\n                (0, $7GIZw$react).Children.forEach(children, (node)=>{\n                    if (node.type === $70d70eb16ea48428$var$Row) {\n                        if (cells.length < context.columns.length) throw new Error(\"All of a Row's child Cells must be positioned before any child Rows.\");\n                        childRows.push({\n                            type: \"item\",\n                            element: node\n                        });\n                    } else cells.push({\n                        type: \"cell\",\n                        element: node\n                    });\n                });\n                if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n                yield* cells;\n                yield* childRows;\n            }\n        },\n        shouldInvalidate (newContext) {\n            // Invalidate all rows if the columns changed.\n            return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i)=>c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;\n        }\n    };\n};\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */ // We don't want getCollectionNode to show up in the type definition\nlet $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\n\n\nexport {$70d70eb16ea48428$export$b59bdbef9ce70de2 as Row};\n//# sourceMappingURL=Row.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}