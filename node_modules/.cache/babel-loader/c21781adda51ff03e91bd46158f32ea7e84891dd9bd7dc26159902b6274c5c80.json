{"ast":null,"code":"import { listData as $b1f0cad8af73213b$export$3585ede4d035bf14 } from \"./utils.mjs\";\nimport { filterDOMProps as $by1yQ$filterDOMProps, useId as $by1yQ$useId, mergeProps as $by1yQ$mergeProps } from \"@react-aria/utils\";\nimport { useFocusWithin as $by1yQ$useFocusWithin } from \"@react-aria/interactions\";\nimport { useLabel as $by1yQ$useLabel } from \"@react-aria/label\";\nimport { useSelectableList as $by1yQ$useSelectableList } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n  let domProps = (0, $by1yQ$filterDOMProps)(props, {\n    labelable: true\n  });\n  // Use props instead of state here. We don't want this to change due to long press.\n  let selectionBehavior = props.selectionBehavior || \"toggle\";\n  let linkBehavior = props.linkBehavior || (selectionBehavior === \"replace\" ? \"action\" : \"override\");\n  if (selectionBehavior === \"toggle\" && linkBehavior === \"action\")\n    // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = \"override\";\n  let {\n    listProps: listProps\n  } = (0, $by1yQ$useSelectableList)({\n    ...props,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    linkBehavior: linkBehavior\n  });\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $by1yQ$useFocusWithin)({\n    onFocusWithin: props.onFocus,\n    onBlurWithin: props.onBlur,\n    onFocusWithinChange: props.onFocusChange\n  });\n  // Share list id and some props with child options.\n  let id = (0, $by1yQ$useId)(props.id);\n  (0, $b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {\n    id: id,\n    shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n    shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n    shouldFocusOnHover: props.shouldFocusOnHover,\n    isVirtualized: props.isVirtualized,\n    onAction: props.onAction,\n    linkBehavior: linkBehavior\n  });\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps\n  } = (0, $by1yQ$useLabel)({\n    ...props,\n    id: id,\n    // listbox is not an HTML input element so it\n    // shouldn't be labeled by a <label> element.\n    labelElementType: \"span\"\n  });\n  return {\n    labelProps: labelProps,\n    listBoxProps: (0, $by1yQ$mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === \"multiple\" ? {\n      \"aria-multiselectable\": \"true\"\n    } : {}, {\n      role: \"listbox\",\n      ...(0, $by1yQ$mergeProps)(fieldProps, listProps)\n    })\n  };\n}\nexport { $c132121280ec012d$export$50eacbbf140a3141 as useListBox };","map":{"version":3,"names":["listData","$b1f0cad8af73213b$export$3585ede4d035bf14","filterDOMProps","$by1yQ$filterDOMProps","useId","$by1yQ$useId","mergeProps","$by1yQ$mergeProps","useFocusWithin","$by1yQ$useFocusWithin","useLabel","$by1yQ$useLabel","useSelectableList","$by1yQ$useSelectableList","$c132121280ec012d$export$50eacbbf140a3141","props","state","ref","domProps","labelable","selectionBehavior","linkBehavior","listProps","selectionManager","collection","disabledKeys","focusWithinProps","onFocusWithin","onFocus","onBlurWithin","onBlur","onFocusWithinChange","onFocusChange","id","set","shouldUseVirtualFocus","shouldSelectOnPressUp","shouldFocusOnHover","isVirtualized","onAction","labelProps","fieldProps","labelElementType","listBoxProps","selectionMode","role","useListBox"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/node_modules/@react-aria/listbox/dist/useListBox.mjs"],"sourcesContent":["import {listData as $b1f0cad8af73213b$export$3585ede4d035bf14} from \"./utils.mjs\";\nimport {filterDOMProps as $by1yQ$filterDOMProps, useId as $by1yQ$useId, mergeProps as $by1yQ$mergeProps} from \"@react-aria/utils\";\nimport {useFocusWithin as $by1yQ$useFocusWithin} from \"@react-aria/interactions\";\nimport {useLabel as $by1yQ$useLabel} from \"@react-aria/label\";\nimport {useSelectableList as $by1yQ$useSelectableList} from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ \n\n\n\n\nfunction $c132121280ec012d$export$50eacbbf140a3141(props, state, ref) {\n    let domProps = (0, $by1yQ$filterDOMProps)(props, {\n        labelable: true\n    });\n    // Use props instead of state here. We don't want this to change due to long press.\n    let selectionBehavior = props.selectionBehavior || \"toggle\";\n    let linkBehavior = props.linkBehavior || (selectionBehavior === \"replace\" ? \"action\" : \"override\");\n    if (selectionBehavior === \"toggle\" && linkBehavior === \"action\") // linkBehavior=\"action\" does not work with selectionBehavior=\"toggle\" because there is no way\n    // to initiate selection (checkboxes are not allowed inside a listbox). Link items will not be\n    // selectable in this configuration.\n    linkBehavior = \"override\";\n    let { listProps: listProps } = (0, $by1yQ$useSelectableList)({\n        ...props,\n        ref: ref,\n        selectionManager: state.selectionManager,\n        collection: state.collection,\n        disabledKeys: state.disabledKeys,\n        linkBehavior: linkBehavior\n    });\n    let { focusWithinProps: focusWithinProps } = (0, $by1yQ$useFocusWithin)({\n        onFocusWithin: props.onFocus,\n        onBlurWithin: props.onBlur,\n        onFocusWithinChange: props.onFocusChange\n    });\n    // Share list id and some props with child options.\n    let id = (0, $by1yQ$useId)(props.id);\n    (0, $b1f0cad8af73213b$export$3585ede4d035bf14).set(state, {\n        id: id,\n        shouldUseVirtualFocus: props.shouldUseVirtualFocus,\n        shouldSelectOnPressUp: props.shouldSelectOnPressUp,\n        shouldFocusOnHover: props.shouldFocusOnHover,\n        isVirtualized: props.isVirtualized,\n        onAction: props.onAction,\n        linkBehavior: linkBehavior\n    });\n    let { labelProps: labelProps, fieldProps: fieldProps } = (0, $by1yQ$useLabel)({\n        ...props,\n        id: id,\n        // listbox is not an HTML input element so it\n        // shouldn't be labeled by a <label> element.\n        labelElementType: \"span\"\n    });\n    return {\n        labelProps: labelProps,\n        listBoxProps: (0, $by1yQ$mergeProps)(domProps, focusWithinProps, state.selectionManager.selectionMode === \"multiple\" ? {\n            \"aria-multiselectable\": \"true\"\n        } : {}, {\n            role: \"listbox\",\n            ...(0, $by1yQ$mergeProps)(fieldProps, listProps)\n        })\n    };\n}\n\n\nexport {$c132121280ec012d$export$50eacbbf140a3141 as useListBox};\n//# sourceMappingURL=useListBox.mjs.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}