{"ast":null,"code":"var _jsxFileName = \"/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/src/screens/FeedScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NotaFormulario from '../components/NotaFormulario';\nimport ListaEncuestas from '../components/ListaEncuestas';\nimport logo from '../logo.svg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FeedScreen() {\n  _s();\n  const [encuestas, setEncuestas] = useState([]);\n  const [recargar, setRecargar] = useState(false);\n\n  // Función para manejar el recargo\n  const manejarRecarga = () => {\n    setRecargar(!recargar);\n  };\n  // Usar useEffect para recargar datos cuando se indica\n  useEffect(() => {\n    // Aquí puedes simular la carga de datos o realizar una llamada a la API\n    console.log(\"Recargando datos de encuestas\");\n    // Por ejemplo, puedes reestablecer los datos de ejemplo:\n    setEncuestas([{\n      id: 1,\n      titulo: 'Encuesta 1'\n    }, {\n      id: 2,\n      titulo: 'Encuesta 2'\n    }]);\n    // setRecargar(false); // Puede ser útil si necesitas resetear el trigger\n  }, [recargar]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo color-indigo-500\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(NotaFormulario, {\n        onRecargarEncuestas: manejarRecarga\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ListaEncuestas, {\n        encu: encuestas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n_s(FeedScreen, \"mWn4M7pw5IpYmQzYQ4wjrsjDSdk=\");\n_c = FeedScreen;\nexport default FeedScreen;\nvar _c;\n$RefreshReg$(_c, \"FeedScreen\");","map":{"version":3,"names":["React","useState","useEffect","NotaFormulario","ListaEncuestas","logo","jsxDEV","_jsxDEV","FeedScreen","_s","encuestas","setEncuestas","recargar","setRecargar","manejarRecarga","console","log","id","titulo","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onRecargarEncuestas","encu","_c","$RefreshReg$"],"sources":["/Users/daniel/Documents/Webs/Encuestas/rama-front/Encuestas/src/screens/FeedScreen.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NotaFormulario from '../components/NotaFormulario';\nimport ListaEncuestas from '../components/ListaEncuestas'; \nimport logo from '../logo.svg';\n\nfunction FeedScreen(){\n  const [encuestas, setEncuestas] = useState([]);\n    const [recargar, setRecargar] = useState(false);\n\n    // Función para manejar el recargo\n    const manejarRecarga = () => {\n        setRecargar(!recargar);\n    };\n    // Usar useEffect para recargar datos cuando se indica\n    useEffect(() => {\n      // Aquí puedes simular la carga de datos o realizar una llamada a la API\n      console.log(\"Recargando datos de encuestas\");\n      // Por ejemplo, puedes reestablecer los datos de ejemplo:\n      setEncuestas([{ id: 1, titulo: 'Encuesta 1' }, { id: 2, titulo: 'Encuesta 2' }]);\n      // setRecargar(false); // Puede ser útil si necesitas resetear el trigger\n    }, [recargar]);\n  return(\n\n        <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo color-indigo-500\" alt=\"logo\" />\n          <NotaFormulario onRecargarEncuestas={manejarRecarga} />\n          <ListaEncuestas encu={encuestas} />\n        </header>\n        </div>\n  )\n}\nexport default FeedScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,IAAI,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,UAAUA,CAAA,EAAE;EAAAC,EAAA;EACnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMa,cAAc,GAAGA,CAAA,KAAM;IACzBD,WAAW,CAAC,CAACD,QAAQ,CAAC;EAC1B,CAAC;EACD;EACAV,SAAS,CAAC,MAAM;IACd;IACAa,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;IAC5C;IACAL,YAAY,CAAC,CAAC;MAAEM,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAa,CAAC,EAAE;MAAED,EAAE,EAAE,CAAC;MAAEC,MAAM,EAAE;IAAa,CAAC,CAAC,CAAC;IAChF;EACF,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;EAChB,oBAEML,OAAA;IAAKY,SAAS,EAAC,KAAK;IAAAC,QAAA,eACpBb,OAAA;MAAQY,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5Bb,OAAA;QAAKc,GAAG,EAAEhB,IAAK;QAACc,SAAS,EAAC,2BAA2B;QAACG,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACnEnB,OAAA,CAACJ,cAAc;QAACwB,mBAAmB,EAAEb;MAAe;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACvDnB,OAAA,CAACH,cAAc;QAACwB,IAAI,EAAElB;MAAU;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7B;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd;AAACjB,EAAA,CA1BQD,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AA2BnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}